<!DOCTYPE html>
<!--

License:

OneZoom version 1.0.360 (2012)
Copyright (c) 2012 owned by James Rosindell and Imperial College, London
URL: www.onezoom.org
Citation: "OneZoom: A Fractal Explorer for the Tree of Life" PLoS Biology (2012) Rosindell, J. and Harmon, L. J.
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


Notes:

Conceptualised and written by James Rosindell with advisory input at all stages of development from Luke Harmon

Please edit to include your own data by opening in a text editor and following the instructions
Please send us your edited software to be displayed at www.OneZoom.org where you will be credited as a contributor
Please refer to www.OneZoom.org for software updates
Please e-mail us using the address mail@onezoom.org
By using OneZoom, you agree to cite the associated paper in any resulting publications
When editing the software, you must not remove the author and copyright attribution information

If you see only control buttons and no phylogenetic tree on loading, your browser probably does not support the html 5 canvas element 
This software has been tested on the latest versions of safari (Mac), Google Chrome (PC) and firefox (Mac and PC) 

-->



<script type="text/javascript">
	
    function userdata()
	{
		// edit this line to change the default data
        fulltree = new midnode("(((((((((Sequoia_sempervirens:0.006125574273,(Callitris_intratropica:0.004594180704,(Juniperus_procera:0.003062787136,Calocedrus_macrolepis:0.003062787136):0.001531393568):0.001531393568):0.004594180704,(Taxus_brevifolia:0.001531393568,Taxus_floridana:0.001531393568)Taxus_ott684213:0.009188361409):0.009188361409,((Araucaria_cunninghamii:0.003062787136,(Araucaria_laubenfelsii:0.001531393568,Araucaria_muelleri:0.001531393568):0.001531393568):0.003062787136,(Araucaria_araucana:0.001531393568,Araucaria_hunsteinii:0.001531393568):0.004594180704)Araucaria_ott786680:0.01378254212):0.02450229709,((((Pinus_maximartinezii:0.004594180704,(Pinus_strobus:0.003062787136,(Pinus_lambertiana:0.001531393568,Pinus_kwangtungensis:0.001531393568):0.001531393568):0.001531393568)Strobus_ott1005718:0.007656967841,((Pinus_sylvestris:0.001531393568,Pinus_nigra:0.001531393568):0.004594180704,(Pinus_palustris:0.003062787136,(Pinus_ponderosa:0.001531393568,Pinus_jeffreyi:0.001531393568):0.001531393568):0.003062787136)Pinus_subgenus_Pinus_ott531304:0.006125574273)Pinus_ott771683:0.003062787136,(Picea_glehnii:0.001531393568,Picea_jezoensis:0.001531393568):0.01378254211):0.007656967841,(Tsuga_canadensis:0.006125574273,(Abies_sachalinensis:0.004594180704,(Abies_homolepis:0.003062787136,(Abies_concolor:0.001531393568,Abies_magnifica:0.001531393568):0.001531393568):0.001531393568):0.001531393568):0.01684532925):0.02143950995):0.01531393568,(((Zamia_amblyphyllidia:0.003062787136,(Ceratozamia_norstogii:0.001531393568,Ceratozamia_mirandae:0.001531393568)Ceratozamia_ott379052:0.001531393568):0.007656967841,((Dioon_caputoi:0.003062787136,(Dioon_sonorense:0.003062787136,Dioon_merolae:0.003062787136):0):0.003062787136,(Dioon_edule:0.001531393568,Dioon_spinulosum:0.001531393568):0.004594180704)Dioon_ott582850:0.004594180704):0.003062787136,(Encephalartos_cycadifolius:0.001531393568,Encephalartos_villosus:0.001531393568):0.01225114855):0.04594180704)Acrogymnospermae_ott5296507:0.9173047473,((((((Thesium_subsucculentum:0.3537519142,(((((((((Leontopodium_alpinum:0.04900459418,((Thelesperma_megapotamicum:0.02450229709,((Coespeletia_timotensis:0.01378254211,((Tetraneuris_herbacea:0.003062787136,(Helenium_virginicum:0.001531393568,Balduina_angustifolia:0.001531393568)Gaillardiinae_ott757757:0.001531393568)Helenieae_ott557770:0.01071975498,(Ratibida_columnifera:0.007656967841,(Balsamorhiza_sagittata:0.007656967841,(Echinacea_angustifolia:0.007656967841,(Helianthus_divaricatus:0.003062787136,(Ambrosia_deltoidea:0.001531393568,Ambrosia_dumosa:0.001531393568)Ambrosia_ott601709:0.001531393568):0.004594180704):0):0)Heliantheae_ott557772:0.006125574273):0):0.01071975498,((Liatris_scariosa:0.003062787136,(Eupatorium_resinosum:0.001531393568,Eupatorium_perfoliatum:0.001531393568):0.001531393568)Eupatorieae_ott557774:0.02143950995,(Arnica_angustifolia:0.003062787136,(Argyroxiphium_sandwicense_subsp._macrocephalum:0.001531393568,Holocarpha_macradenia:0.001531393568)Madiinae_ott1091741:0.001531393568)Madieae_ott578403:0.02143950995):0):0)Heliantheae_alliance_ott757761:0.02450229709,(((Conyza_canadensis:0.009188361409,(Erigeron_kachinensis:0.009188361409,(Boltonia_decurrens:0.009188361409,(Pyrrocoma_radiata:0.009188361409,(Pityopsis_aspera:0.009188361409,(Solidago_mollis:0.001531393568,Solidago_canadensis_var._scabra:0.001531393568)Solidago_ott872351:0.007656967841):0):0):0):0)North_American_clade_ott445368:0.004594180704,(Tetramolopium_arenarium:0.003062787136,(Aster_amellus:0.001531393568,Aster_pyrenaeus:0.001531393568)Aster_ott5507594:0.001531393568)Australasian_lineages_ott124080:0.01071975498)Astereae_ott1084166:0.03522205207,((Jacobaea_vulgaris:0.001531393568,Senecio_filaginoides:0.001531393568)Senecioninae_ott349491:0.04747320061,(Artemisia_genipi:0.003062787136,(Santolina_melidensis:0.003062787136,Achillea_millefolium:0.003062787136):0)Anthemideae_ott557765:0.04594180704):0):0):0)Asteroideae_ott1084160:0.01531393568,(Sonchus_pustulatus:0.01378254211,(Malacothrix_indecora:0.01378254211,(Lactuca_virosa:0.01378254211,((Tragopogon_dubius:0.003062787136,(Scorzonera_humilis:0.001531393568,Scorzonera_hispanica:0.001531393568)Scorzonera_ott485929:0.001531393568)Scorzonerinae_ott472093:0.01071975498,((Taraxacum_erythrospermum:0.001531393568,Taraxacum_officinale:0.001531393568)Taraxacum_ott524978:0.01225114855,(Picris_hieracioides:0.001531393568,Hypochaeris_radicata:0.001531393568)Hypochaeridinae_ott472096:0.01225114855):0):0):0):0)Cichorieae_ott578387:0.05053598775):0.03062787136,(Carlina_vulgaris:0.02909647779,((Cheirolophus_metlesicsii:0.007656967841,(Centaurea_maculosa:0.006125574273,(Centaurea_corymbosa:0.006125574273,(Centaurea_jacea:0.006125574273,(Centaurea_stoebe:0.006125574273,Centaurea_horrida:0.006125574273):0):0):0)Centaurea_ott5507653:0.001531393568)Centaureinae_ott627941:0.02143950995,(Jurinea_fontqueri:0.01837672282,(Carduus_nutans:0.01837672282,(Saussurea_medusa:0.01837672282,(Cirsium_pitcheri:0.01378254211,(Cirsium_acaule:0.01378254211,(Cirsium_dissectum:0.01378254211,(Cirsium_scariosum:0.01378254211,(Cirsium_arvense:0.01378254211,(Cirsium_vulgare:0.01378254211,(Cirsium_palustre:0.01378254211,(Cirsium_pannonicum:0.01378254211,(Cirsium_undulatum:0.01378254211,Cirsium_perplexans:0.01378254211):0):0):0):0):0):0):0):0)Cirsium_ott70338:0.004594180704):0):0)Carduinae_ott627940:0.01071975498):0)Cardueae_ott557760:0.06584992343):0.004594180704,(Lobelia_boykinii:0.003062787136,(Adenophora_potaninii:0.001531393568,Adenophora_lobophylla:0.001531393568)Adenophora_ott94695:0.001531393568)Campanulaceae_ott1086303:0.09647779479):0.0336906585,(((Sambucus_racemosa_subsp._sieboldiana:0.001531393568,Viburnum_furcatum:0.001531393568)Adoxaceae_ott757494:0.007656967841,(Succisa_pratensis:0.006125574273,(Lonicera_maackii:0.004594180704,(Nardostachys_grandiflora:0.003062787136,(Scabiosa_columbaria:0.001531393568,Dipsacus_fullonum:0.001531393568):0.001531393568):0.001531393568):0.001531393568)Caprifoliaceae_ott1042135:0.003062787136)Dipsacales_ott659705:0.02297090352,((Mulinum_spinosum:0.01837672282,((Sanicula_europaea:0.004594180704,(Eryngium_cuneifolium:0.003062787136,(Eryngium_maritimum:0.003062787136,Eryngium_alpinum:0.003062787136):0)Eryngium_ott64762:0.001531393568)Saniculeae_ott589861:0.01225114855,(Pimpinella_saxifraga:0.01071975498,(((Chaerophyllum_aureum:0.003062787136,(Daucus_carota:0.001531393568,Laserpitium_longiradium:0.001531393568)Daucinae_ott823074:0.001531393568)Scandiceae_ott298518:0.003062787136,(Heracleum_mantegazzianum:0.001531393568,Carum_carvi:0.001531393568):0.004594180704):0.004594180704,(Lomatium_cookii:0.001531393568,Lomatium_bradshawii:0.001531393568)Lomatium_ott5513145:0.009188361409):0):0.006125574273):0.001531393568):0.003062787136,(Panax_quinquefolius:0.001531393568,Dendropanax_trifidus:0.001531393568)Araliaceae_ott524079:0.01990811639):0.01071975498):0.1010719755):0.06891271057,(((Ramonda_myconi:0.0382848392,(((Lantana_camara:0.01378254211,((Dicerandra_frutescens:0.003062787136,(Thymus_webbianus:0.001531393568,Thymus_loscosii:0.001531393568)Thymus_ott907454:0.001531393568):0.009188361409,((Erythranthe_lewisii:0.003062787136,(Erythranthe_guttata:0.003062787136,Erythranthe_cardinalis:0.003062787136):0)Erythranthe_ott5334418:0.004594180704,(Pedicularis_furbishiae:0.003062787136,(Melampyrum_pratense:0.001531393568,Rhinanthus_minor:0.001531393568):0.001531393568):0.004594180704):0.004594180704):0.001531393568):0.009188361409,((Avicennia_marina:0.001531393568,Avicennia_germinans:0.001531393568)Avicennia_ott582594:0.006125574273,(Pinguicula_alpina:0.004594180704,(Pinguicula_vulgaris:0.004594180704,(Pinguicula_ionantha:0.004594180704,Pinguicula_villosa:0.004594180704):0):0)Pinguicula_ott659715:0.003062787136):0.01531393568):0.01378254211,(Digitalis_purpurea:0.01225114855,(Veronica_arvensis:0.01225114855,(Collinsia_verna:0.009188361409,((Anarrhinum_fruticosum:0.004594180704,(Pseudomisopates_rivas-martinezii:0.004594180704,(Antirrhinum_lopesianum:0.001531393568,Antirrhinum_subbaeticum:0.001531393568)Antirrhinum_ott596453:0.003062787136):0)Antirrhineae_ott182044:0.003062787136,(Plantago_media:0.001531393568,Plantago_coronopus:0.001531393568)Plantago_ott609811:0.006125574273):0.001531393568):0.003062787136):0)Plantaginaceae_ott1041309:0.02450229709):0.001531393568)Core_Lamiales_ott5263556:0.01071975498,(Phacelia_insularis:0.009188361409,((Myosotis_ramosissima:0.004594180704,(Oreocarya_flava:0.003062787136,(Cynoglossum_officinale:0.001531393568,Cynoglossum_virginianum:0.001531393568)Cynoglossum_ott97434:0.001531393568):0.001531393568):0.003062787136,(Lithospermum_ruderale:0.001531393568,Echium_vulgare:0.001531393568):0.006125574273):0.001531393568)Boraginales_ott5261925:0.03981623277):0.01837672282,(((Stenaria_nigricans:0.004594180704,(Guettarda_viburnoides:0.003062787136,(Calycophyllum_spruceanum:0.001531393568,Gardenia_actinocarpa:0.001531393568):0.001531393568):0.001531393568)Rubiaceae_ott1014022:0.009188361409,((Asclepias_meadii:0.003062787136,(Himatanthus_drasticus:0.001531393568,Alyxia_stellata:0.001531393568)Rauvolfioideae_ott741503:0.001531393568)Apocynaceae_ott524059:0.004594180704,(Gentiana_pneumonanthe:0.003062787136,(Gentianella_campestris:0.003062787136,Frasera_speciosa:0.003062787136):0)Gentianeae_ott707911:0.004594180704):0.006125574273)Gentianales_ott524062:0.003062787136,(Fabiana_imbricata:0.001531393568,Ipomoea_leptophylla:0.001531393568):0.01531393568):0.05053598775):0.134762634):0.04287901991,(Impatiens_capensis:0.04134762634,((((Camellia_japonica:0.01378254211,(((Leucopogon_setiger:0.006125574273,((Rhododendron_maximum:0.001531393568,Rhododendron_ponticum:0.001531393568):0.003062787136,(Calluna_vulgaris:0.001531393568,Erica_ciliaris:0.001531393568):0.003062787136):0.001531393568)Ericaceae_ott66730:0.003062787136,(Sarracenia_alata:0.001531393568,Sarracenia_purpurea:0.001531393568)Sarracenia_ott639943:0.007656967841):0.003062787136,(Styrax_obassia:0.001531393568,Pyxidanthera_brevifolia:0.001531393568):0.01071975498):0.001531393568):0.01837672282,((((Primula_elatior:0.006125574273,(Primula_vulgaris:0.006125574273,(Primula_veris:0.006125574273,(Primula_farinosa:0.006125574273,Primula_nutans:0.006125574273):0):0):0)Primula_ott545827:0.003062787136,(Androsace_vitaliana:0.001531393568,Androsace_elongata:0.001531393568)Androsace_ott210342:0.007656967841):0.004594180704,(Ardisia_escallonioides:0.003062787136,(Ardisia_elliptica:0.003062787136,Ardisia_guianensis:0.003062787136):0)Ardisia_ott776703:0.01071975498)Primulaceae_ott486216:0.003062787136,(Pouteria_sagotiana:0.001531393568,Manilkara_zapota:0.001531393568):0.01531393568):0.01531393568):0.004594180704,(Polemonium_van-bruntiae:0.003062787136,(Ipomopsis_tenuituba:0.001531393568,Ipomopsis_aggregata:0.001531393568)Ipomopsis_ott581707:0.001531393568)Polemoniaceae_ott814217:0.0336906585):0.003062787136,(Bertholletia_excelsa:0.001531393568,Grias_peruviana:0.001531393568)Lecythidaceae_ott429494:0.0382848392):0.001531393568)Ericales_ott648892:0.2036753446):0.003062787136,(Cornus_florida:0.001531393568,Hydrangea_paniculata:0.001531393568)Cornales_ott229290:0.2465543645)asterids_ott1008294:0.1041347626,(((((Escobaria_robbinsiorum:0.0336906585,(Lophophora_diffusa:0.0336906585,(Ferocactus_crispatus:0.0336906585,(Echinocactus_platyacanthus:0.0336906585,(Coryphantha_werdermannii:0.0336906585,(Pediocactus_bradyi:0.0336906585,((Ariocarpus_fissuratus:0.001531393568,Ariocarpus_scaphirostris:0.001531393568)Ariocarpus_ott220915:0.03215926493,((Mammillaria_huitzilopochtli:0.01531393568,(Mammillaria_supertexta:0.01531393568,(Mammillaria_crucigera:0.01531393568,(Mammillaria_baumii:0.01531393568,(Mammillaria_dixanthocentron:0.01531393568,(Mammillaria_napina:0.01531393568,(Mammillaria_pectinifera:0.01531393568,(Mammillaria_mystax:0.01531393568,(Mammillaria_magnimamma:0.01531393568,(Mammillaria_hernandezii:0.01531393568,Mammillaria_scolymoides:0.01531393568):0):0):0):0):0):0):0):0):0)Mammillaria_ott1076965:0.01837672282,(Astrophytum_ornatum:0.004594180704,(Astrophytum_myriostigma:0.004594180704,(Astrophytum_capricorne:0.004594180704,Astrophytum_asterias:0.004594180704):0):0)Astrophytum_ott220908:0.02909647779):0):0):0):0):0):0):0)Cacteae_ott801070:0.01684532925,(Escontria_chiotilla:0.01531393568,(Mitrocereus_fulviceps:0.01531393568,(Carnegiea_gigantea:0.01531393568,(Stenocereus_eruca:0.01531393568,(Cephalocereus_senilis:0.01531393568,((Pachycereus_gaumeri:0.001531393568,Pachycereus_pecten-aboriginum:0.001531393568)Pachycereus_ott141040:0.01378254211,(Neobuxbaumia_macrocephala:0.004594180704,(Neobuxbaumia_tetetzo:0.004594180704,(Neobuxbaumia_mezcalaensis:0.004594180704,Neobuxbaumia_polylopha:0.004594180704):0):0)Neobuxbaumia_ott322818:0.01071975498):0):0):0):0):0)Echinocereeae_ott801074:0.03522205207)Cactoideae_ott227063:0.006125574273,(Opuntia_microdasys:0.004594180704,(Opuntia_macrocentra:0.004594180704,(Opuntia_macrorhiza:0.004594180704,Opuntia_rastrera:0.004594180704):0):0)Opuntia_ott151083:0.05206738132):0.02603369066,((Petrocoptis_pseudoviscosa:0.01837672282,(Sabulina_rossii:0.01837672282,(Arenaria_serpyllifolia:0.01837672282,(Minuartia_obtusiloba:0.01837672282,((Silene_acaulis:0.006125574273,(Silene_tatarica:0.006125574273,(Silene_spaldingii:0.006125574273,(Silene_regia:0.006125574273,Silene_douglasii:0.006125574273):0):0):0)Silene_ott842205:0.01225114855,((Paronychia_jamesii:0.001531393568,Paronychia_pulvinata:0.001531393568)Paronychia_ott848752:0.01684532925,(Cerastium_pumilum:0.001531393568,Cerastium_fontanum:0.001531393568)Cerastium_ott842191:0.01684532925):0):0):0):0):0)Caryophyllaceae_ott317818:0.006125574273,(Kali_australe:0.004594180704,(Atriplex_vesicaria:0.003062787136,(Atriplex_acanthocarpa:0.003062787136,Atriplex_canescens:0.003062787136):0)Atriplex_ott892390:0.001531393568):0.01990811639):0.05819295559):0.01990811639,((Eriogonum_longifolium:0.007656967841,(Persicaria_perfoliata:0.006125574273,((Rumex_rupestris:0.001531393568,Rumex_obtusifolius:0.001531393568)Rumex_ott904386:0.003062787136,(Polygonum_basiramium:0.001531393568,Polygonum_nesomii:0.001531393568)Polygonum_ott43733:0.003062787136):0.001531393568)Polygonoideae_ott839947:0.001531393568)Polygonaceae_ott904376:0.01071975498,((Armeria_maritima:0.003062787136,(Armeria_merinoi:0.003062787136,Armeria_caespitosa:0.003062787136):0)Armeria_ott941995:0.006125574273,(Limonium_carolinianum:0.004594180704,(Limonium_delicatulum:0.004594180704,(Limonium_lilacinum:0.004594180704,Limonium_narbonense:0.004594180704):0):0)Limonium_ott387506:0.004594180704)Plumbaginaceae_ott532273:0.009188361409):0.08422664625)Caryophyllales_ott216628:0.2496171516):0.001531393568):0.2771822358,(((Guaiacum_sanctum:0.1638591118,(((Acacia_victoriae:0.08422664625,(Stryphnodendron_microstachyum:0.08422664625,(Periandra_mediterranea:0.08422664625,(Acacia_bilimekii:0.08422664625,((Dicorynia_guianensis:0.07044410413,(((Andira_aubletii:0.03981623277,((((Eremosparton_songoricum:0.01837672282,((Oxytropis_jabalambrensis:0.01071975498,(Astragalus_michauxii:0.01071975498,(Astragalus_alopecurus:0.01071975498,(Astragalus_tremolsianus:0.01071975498,(Astragalus_cremnophylax:0.01071975498,(Astragalus_scaphoides:0.01071975498,(Astragalus_tyghensis:0.01071975498,Astragalus_peckii:0.01071975498):0):0):0):0):0):0):0.006125574273,(Lathyrus_vernus:0.004594180704,(Trifolium_pratense:0.003062787136,(Trifolium_parryi:0.001531393568,Trifolium_dasyphyllum:0.001531393568):0.001531393568):0.001531393568):0.01225114855):0.001531393568):0.006125574273,(Sesbania_vesicaria:0.004594180704,(Anthyllis_vulneraria:0.003062787136,(Lotus_corniculatus:0.001531393568,Lotus_arinagensis:0.001531393568)Lotus_ott879017:0.001531393568):0.001531393568):0.01990811639):0.006125574273,((Phaseolus_lunatus:0.001531393568,Psoralidium_tenuiflorum:0.001531393568):0.003062787136,(Lespedeza_cuneata:0.001531393568,Lespedeza_virginica:0.001531393568)Lespedeza_ott653601:0.003062787136):0.02603369066):0.009188361409,(Adesmia_volckmannii:0.006125574273,((Pterocarpus_angolensis:0.001531393568,Platymiscium_filipes:0.001531393568):0.003062787136,(Aeschynomene_virginica:0.001531393568,Machaerium_cuspidatum:0.001531393568):0.003062787136):0.001531393568):0.0336906585):0):0.01071975498,((Lupinus_tidestromii:0.003062787136,(Lupinus_lepidus:0.001531393568,Lupinus_arboreus:0.001531393568):0.001531393568)Lupinus_ott878988:0.006125574273,(Cytisus_scoparius:0.004594180704,(Adenocarpus_gibbsianus:0.003062787136,(Ulex_gallii:0.001531393568,Ulex_minor:0.001531393568)Ulex_ott539555:0.001531393568):0.001531393568):0.004594180704):0.04134762634):0.01837672282,(Acacia_suaveolens:0.01684532925,(((Acacia_aneura:0.007656967841,(Pentaclethra_macroloba:0.006125574273,(Vachellia_pennatula:0.004594180704,(Prosopis_flexuosa:0.003062787136,(Prosopis_laevigata:0.003062787136,Prosopis_glandulosa:0.003062787136):0)Prosopis_ott5509277:0.001531393568):0.001531393568):0.001531393568):0.003062787136,(Parkinsonia_aculeata:0.001531393568,Mora_paraensis:0.001531393568):0.009188361409):0.004594180704,(Cassia_nemophila:0.003062787136,(Chamaecrista_fasciculata:0.001531393568,Chamaecrista_lineata:0.001531393568)Chamaecrista_ott959682:0.001531393568):0.01225114855):0.001531393568):0.05206738132):0.001531393568):0.01378254211,(Prioria_copaifera:0.006125574273,(Dicymbe_altsonii:0.006125574273,(Eperua_falcata:0.006125574273,(Tetraberlinia_bifoliolata:0.006125574273,Microberlinia_bisulcata:0.006125574273):0):0):0)Detarieae_ott792364:0.07810107198):0):0):0):0)Fabaceae_ott560323:0.04900459418,((Cucurbita_pepo:0.01837672282,(Fuscospora_fusca:0.01684532925,((Castanea_dentata:0.007656967841,((Fagus_grandifolia:0.003062787136,(Fagus_sylvatica:0.003062787136,Fagus_crenata:0.003062787136):0)Fagus_ott1028998:0.004594180704,(Quercus_rugosa:0.001531393568,Quercus_mongolica_subsp._crispula:0.001531393568)Quercus_ott791121:0.006125574273):0)Fagaceae_ott267713:0.007656967841,((Annamocarya_sinensis:0.001531393568,Pterocarya_rhoifolia:0.001531393568)Juglandaceae_ott438186:0.004594180704,(Alnus_incana_subsp._rugosa:0.003062787136,(Betula_pubescens_subsp._tortuosa:0.001531393568,Betula_nana:0.001531393568)Betula_ott267715:0.001531393568)Betulaceae_ott791138:0.003062787136):0.009188361409):0.001531393568)Fagales_ott267709:0.001531393568):0.02909647779,((((Rubus_ursinus:0.003062787136,(Rubus_saxatilis:0.003062787136,Rubus_discolor:0.003062787136):0)Rubus_ott972648:0.01378254211,((Agrimonia_eupatoria:0.009188361409,((Fragaria_vesca:0.004594180704,(Horkelia_congesta:0.003062787136,(Potentilla_anserina:0.001531393568,Potentilla_recta:0.001531393568)Potentilla_ott5342278:0.001531393568)Potentilleae_unplaced_ott827034:0.001531393568)Potentilleae_ott891491:0.003062787136,(Rosa_canina:0.001531393568,Rosa_multiflora:0.001531393568)Rosa_ott259066:0.006125574273):0.001531393568):0.003062787136,(Geum_reptans:0.001531393568,Geum_rivale:0.001531393568)Geum_ott259063:0.01071975498):0.004594180704):0.004594180704,(Purshia_subintegra:0.003062787136,(Prunus_serotina:0.001531393568,Prunus_africana:0.001531393568)Prunus_ott731578:0.001531393568):0.01837672282)Rosaceae_ott208036:0.006125574273,((Ziziphus_mauritiana:0.001531393568,Paliurus_ramosissimus:0.001531393568)Paliureae_ott784649:0.003062787136,(Cecropia_obtusifolia:0.001531393568,Brosimum_alicastrum:0.001531393568):0.003062787136):0.02297090352)Rosales_ott208031:0.01990811639):0.08575803982):0.02909647779,(((((Rhizophora_mangle:0.006125574273,(Licania_heteromorpha:0.004594180704,(Linum_tenuifolium:0.003062787136,(Linum_catharticum:0.003062787136,Linum_flavum:0.003062787136):0)Linum_ott1000260:0.001531393568):0.001531393568):0.004594180704,(Euphorbia_fontqueriana:0.003062787136,(Triadica_sebifera:0.001531393568,Actinostemon_concolor:0.001531393568)Hippomaneae_ott520957:0.001531393568):0.007656967841):0.003062787136,(Phyllanthus_indofischeri:0.001531393568,Phyllanthus_emblica:0.001531393568)Phyllanthus_ott5509975:0.01225114855):0.01071975498,((Salix_arctica:0.006125574273,(Viola_sagittata:0.004594180704,(Viola_elatior:0.004594180704,(Viola_stagnina:0.004594180704,Viola_pumila:0.004594180704):0):0)Viola_ott295597:0.001531393568):0.003062787136,(Garcinia_lucida:0.001531393568,Hypericum_cumulicola:0.001531393568):0.007656967841):0.01531393568):0.003062787136,(Rourea_induta:0.001531393568,Oxalis_acetosella:0.001531393568):0.02603369066):0.134762634):0.001531393568)fabids_ott565281:0.1056661562,((Stachyurus_macrocarpus:0.08728943338,((Aesculus_turbinata:0.02450229709,(((Ailanthus_altissima:0.007656967841,(Entandrophragma_cylindricum:0.006125574273,(Swietenia_macrophylla:0.006125574273,(Khaya_senegalensis:0.006125574273,(Cedrela_odorata:0.006125574273,Carapa_guianensis:0.006125574273):0):0):0)Meliaceae_ott655984:0.001531393568):0.009188361409,((Bursera_glabrifolia:0.001531393568,Boswellia_papyrifera:0.001531393568)Burseraceae_ott350867:0.006125574273,(Choerospondias_axillaris:0.004594180704,(Sclerocarya_birrea:0.004594180704,(Rhus_copallinum:0.001531393568,Rhus_aromatica:0.001531393568)Rhus_ott350866:0.003062787136):0)Anacardiaceae_ott423320:0.003062787136):0.009188361409):0.007656967841,(Acer_palmatum_subsp._amoenum:0.004594180704,(Acer_saccharum:0.004594180704,(Acer_rufinerve:0.004594180704,Acer_pictum_subsp._mono:0.004594180704):0):0)Acer_ott948922:0.01990811639):0)Sapindales_ott229288:0.06125574273,((Cleome_droserifolia:0.02909647779,(Cochlearia_pyrenaica:0.02756508423,(Cochlearia_bavarica:0.02756508423,((Draba_asterophora:0.01378254211,(Parolinia_glabriuscula:0.01378254211,(Anastatica_hierochuntica:0.01378254211,(Lobularia_maritima:0.01378254211,((Rorippa_palustris:0.004594180704,(Lepidium_davisii:0.003062787136,(Boechera_fecunda:0.001531393568,Lesquerella_ovalifolia:0.001531393568):0.001531393568):0.001531393568):0.003062787136,(Braya_fernaldii:0.001531393568,Braya_longii:0.001531393568)Braya_ott682506:0.006125574273):0.006125574273):0):0):0):0.01378254211,(Thlaspi_perfoliatum:0.009188361409,(Alliaria_petiolata:0.007656967841,((Isatis_tinctoria:0.003062787136,(Brassica_insularis:0.001531393568,Brassica_napus:0.001531393568)Brassica_ott309288:0.001531393568):0.003062787136,(Vella_pseudocytisus_subsp._paui:0.001531393568,Vella_pseudocytisus_subsp._pseudocytisus:0.001531393568)Vella_pseudocytisus_ott805084:0.004594180704):0.001531393568):0.001531393568):0.01837672282):0):0)Brassicaceae_ott309271:0.001531393568)Brassicales_ott8844:0.03062787136,(((Vatica_hainanensis:0.01071975498,(Parashorea_chinensis:0.01071975498,(Anisoptera_laevis:0.01071975498,(Shorea_acuminata:0.006125574273,(Shorea_maxwelliana:0.006125574273,(Shorea_leprosula:0.006125574273,(Shorea_ovalis:0.006125574273,Shorea_bracteolata:0.006125574273):0):0):0)Shorea_ott30498:0.004594180704):0):0)Dipterocarpoideae_ott879491:0.009188361409,(Fumana_procumbens:0.007656967841,(Hudsonia_montana:0.007656967841,((Helianthemum_polygonoides:0.001531393568,Helianthemum_motae:0.001531393568)Helianthemum_ott343132:0.006125574273,(Lechea_deckertii:0.001531393568,Lechea_cernua:0.001531393568)Lechea_ott677499:0.006125574273):0):0)Cistaceae_ott343135:0.01225114855):0.009188361409,((Sphaeralcea_coccinea:0.003062787136,(Abutilon_theophrasti:0.003062787136,Kosteletzkya_pentacarpos:0.003062787136):0)Malvoideae_ott469942:0.004594180704,(Aquilaria_microcarpa:0.003062787136,(Aquilaria_malaccensis:0.003062787136,Aquilaria_crassna:0.003062787136):0)Aquilaria_ott918280:0.004594180704):0.02143950995):0.03062787136):0.02603369066):0.001531393568):0.01684532925,((((Clidemia_hirta:0.003062787136,(Miconia_prasina:0.001531393568,Miconia_albicans:0.001531393568)Miconia_ott5510570:0.001531393568)Melastomataceae_ott489621:0.004594180704,(Syzygium_jambos:0.003062787136,(Psidium_guajava:0.003062787136,Melaleuca_viridiflora:0.003062787136):0)Myrtoideae_ott5740779:0.004594180704):0.004594180704,(Lythrum_salicaria:0.003062787136,(Oenothera_deltoides:0.001531393568,Chamerion_latifolium:0.001531393568)Onagroideae_ott5740793:0.001531393568):0.009188361409)Myrtales_ott648898:0.003062787136,(Geranium_sylvaticum:0.001531393568,Erodium_paularense:0.001531393568):0.01378254211):0.08882082695)malvids_ott565277:0.1653905054)rosids_ott1008296:0.006125574273,(Echeveria_longissima:0.004594180704,(Saxifraga_tridactylites:0.003062787136,(Saxifraga_cotyledon:0.001531393568,Saxifraga_aizoides:0.001531393568):0.001531393568)Saxifragaceae_ott1035588:0.001531393568):0.2710566616):0.3552833078)Pentapetalae_ott5316182:0.007656967841,(Roupala_montana:0.006125574273,(Petrophile_pulchella:0.006125574273,(Banksia_ericifolia:0.006125574273,(Persoonia_lanceolata:0.001531393568,Persoonia_mollis_subsp._nectens:0.001531393568)Persoonia_ott29551:0.004594180704):0):0)Proteaceae_ott209175:0.6324655436):0.02297090352,((Dicentra_canadensis:0.004594180704,(Sarcocapnos_enneaphylla:0.003062787136,(Sarcocapnos_pulcherrima:0.003062787136,Sarcocapnos_baetica:0.003062787136):0)Sarcocapnos_ott188908:0.001531393568)Fumarioideae_ott438104:0.01684532925,(Podophyllum_peltatum:0.01531393568,(Hydrastis_canadensis:0.01378254211,((Aquilegia_chrysantha:0.009188361409,((Actaea_elata:0.003062787136,(Actaea_cordifolia:0.003062787136,Actaea_spicata:0.003062787136):0)Actaea_ott693562:0.004594180704,(Ranunculus_peltatus:0.003062787136,(Anemone_patens:0.001531393568,Anemone_americana:0.001531393568)Anemone_ott385038:0.001531393568):0.004594180704):0.001531393568):0.003062787136,(Trollius_europaeus:0.001531393568,Trollius_laxus:0.001531393568)Trollius_ott1011767:0.01071975498):0.001531393568)Ranunculaceae_ott387826:0.001531393568):0.006125574273):0.6401225115)eudicotyledons_ott431495:0.2388973966,((Ruppia_maritima:0.007656967841,((Heteropsis_macrophylla:0.003062787136,(Heteropsis_oblongifolia:0.003062787136,Heteropsis_flexuosa:0.003062787136):0)Heteropsis_ott226639:0.003062787136,(Arisaema_triphyllum:0.001531393568,Arisaema_serratum:0.001531393568)Arisaema_ott1027662:0.004594180704):0.001531393568)Alismatales_ott399481:0.2297090352,(Dioscorea_chouardii:0.2281776417,((((((Dracaena_cinnabari:0.009188361409,(Furcraea_parmentieri:0.007656967841,((Anthericum_ramosum:0.001531393568,Anthericum_liliago:0.001531393568)Anthericum_ott655588:0.004594180704,(Agave_marmorata:0.003062787136,(Agave_angustifolia:0.003062787136,Agave_potatorum:0.003062787136):0)Agave_ott973369:0.003062787136):0.001531393568)Agavoideae_ott361629:0.001531393568):0.007656967841,(Narcissus_poeticus:0.006125574273,(Allium_vineale:0.004594180704,(Allium_sativum:0.004594180704,(Allium_monanthum:0.004594180704,Allium_tricoccum:0.004594180704):0):0)Allium_ott781603:0.001531393568):0.01071975498):0.003062787136,(Iris_germanica:0.001531393568,Iris_hexagona:0.001531393568)Iris_ott229529:0.01837672282):0.03215926493,(Corallorhiza_trifida:0.03062787136,(Cleistesiopsis_divaricata:0.03062787136,(((Lepanthes_eltoroensis:0.003062787136,(Lepanthes_rubripetala:0.003062787136,Lepanthes_rupestris:0.003062787136):0)Lepanthes_ott661663:0.004594180704,(Guarianthe_aurantiaca:0.003062787136,(Jacquiniella_leucomelana:0.001531393568,Jacquiniella_teretifolia:0.001531393568)Jacquiniella_ott562586:0.001531393568)Laeliinae_ott406684:0.004594180704)Epidendreae_ott22154:0.02297090352,(((Ophrys_sphegodes:0.009188361409,(Herminium_monorchis:0.009188361409,(Orchis_purpurea:0.009188361409,(Dactylorhiza_lapponica:0.009188361409,(Neotinea_ustulata:0.009188361409,(Himantoglossum_hircinum:0.009188361409,Platanthera_hookeri:0.009188361409):0):0):0):0):0)Orchidinae_ott73433:0.006125574273,(Cypripedium_lentiginosum:0.004594180704,(Cypripedium_calceolus:0.004594180704,(Cypripedium_fasciculatum:0.004594180704,Cypripedium_parviflorum:0.004594180704):0):0)Cypripedium_ott530301:0.01071975498):0.01531393568,(Lycaste_aromatica:0.001531393568,Aspasia_principissa:0.001531393568)Maxillarieae_ott595046:0.02909647779):0):0):0)Orchidaceae_ott568878:0.02143950995)Asparagales_ott557124:0.1470137825,((((Syngonanthus_nitens:0.05206738132,((Bromus_tectorum:0.01990811639,(((((Poa_alpina:0.001531393568,Arctophila_fulva:0.001531393568)Poinae_ott837414:0.003062787136,(Festuca_gracillima:0.001531393568,Festuca_eskia:0.001531393568)Loliinae_ott107346:0.003062787136)Poeae_Chloroplast_Group_2_-Poeae_type-_ott5759324:0.006125574273,(Phalaris_brachystachys:0.004594180704,(Calamagrostis_canescens:0.003062787136,(Anthoxanthum_odoratum:0.001531393568,Koeleria_macrantha:0.001531393568):0.001531393568):0.001531393568):0.006125574273)Poeae_ott415737:0.004594180704,(Elymus_repens:0.003062787136,(Hordeum_vulgare_subsp._spontaneum:0.001531393568,Agropyron_cristatum:0.001531393568):0.001531393568)Triticeae_ott693954:0.01225114855):0.004594180704,(Austrostipa_aristiglumis:0.001531393568,Achnatherum_calamagrostis:0.001531393568)Stipeae_ott415709:0.01837672282):0)Pooideae_ott641464:0.03062787136,(Oryza_sativa:0.02909647779,(Molinia_caerulea:0.02756508423,(Danthonia_sericea:0.02756508423,(Aristida_bipartita:0.02756508423,((Anthaenantia_lanata:0.01531393568,((Zea_diploperennis:0.01071975498,((Hyparrhenia_diplandra:0.003062787136,(Schizachyrium_brevifolium:0.001531393568,Schizachyrium_sanguineum:0.001531393568)Schizachyrium_ott338457:0.001531393568)Andropogoninae_ott5759519:0.007656967841,(Themeda_triandra:0.004594180704,(Heteropogon_contortus:0.004594180704,(Bothriochloa_ischaemum:0.001531393568,Bothriochloa_insculpta:0.001531393568)Bothriochloa_ott761203:0.003062787136):0)Anthistiriinae_ott5759523:0.006125574273):0)Andropogoneae_ott475213:0.004594180704,(Setaria_incrassata:0.001531393568,Digitaria_eriantha:0.001531393568)Paniceae_ott475211:0.01378254211):0)Panicoideae_ott641461:0.01225114855,((Bouteloua_rigidiseta:0.003062787136,(Swallenia_alexandrae:0.003062787136,Hilaria_mutica:0.003062787136):0)Cynodonteae_ott1001523:0.003062787136,(Sporobolus_alterniflorus:0.001531393568,Sporobolus_heterolepis:0.001531393568)Sporobolus_ott728964:0.004594180704)Chloridoideae_ott119855:0.02143950995):0):0):0)PACMAD_clade_ott119852:0.001531393568):0.02143950995):0.001531393568):0.006125574273,(Eriophorum_triste:0.004594180704,(Carex_membranacea:0.003062787136,(Carex_humilis:0.003062787136,Carex_bigelowii:0.003062787136):0)Carex_ott554313:0.001531393568)Cyperoideae_ott423248:0.05359877489):0.01990811639,(((Tillandsia_brachycaulos:0.01225114855,(Tillandsia_flexuosa:0.01225114855,(Tillandsia_violacea:0.01225114855,(Tillandsia_recurvata:0.01225114855,(Tillandsia_juncea:0.01225114855,(Tillandsia_macdougallii:0.01225114855,(Tillandsia_multicaulis:0.01225114855,(Tillandsia_punctulata:0.01225114855,Tillandsia_deppeana:0.01225114855):0):0):0):0):0):0):0):0.003062787136,(Catopsis_compacta:0.001531393568,Catopsis_sessiliflora:0.001531393568)Catopsis_ott455049:0.01378254211):0.003062787136,(Aechmea_nudicaulis:0.001531393568,Aechmea_magdalenae:0.001531393568):0.01684532925):0.05972434916)Poales_ott921871:0.067381317,(((Podococcus_barteri:0.02909647779,(Iriartea_deltoidea:0.02909647779,((Rhopalostylis_sapida:0.003062787136,(Dypsis_decaryi:0.003062787136,Ptychosperma_macarthurii:0.003062787136):0)Areceae_ott491534:0.02603369066,((Euterpe_edulis:0.003062787136,(Euterpe_precatoria:0.003062787136,Euterpe_oleracea:0.003062787136):0)Euterpe_ott458101:0.02603369066,(((Phytelephas_seemannii:0.001531393568,Pseudophoenix_sargentii:0.001531393568)Ceroxyloideae_ott102446:0.004594180704,(Attalea_humilis:0.003062787136,(Astrocaryum_aculeatissimum:0.001531393568,Astrocaryum_mexicanum:0.001531393568)Astrocaryum_ott995207:0.001531393568)Cocoseae_ott491539:0.003062787136):0.02297090352,((Geonoma_schottiana:0.006125574273,(Geonoma_orbignyana:0.006125574273,(Geonoma_macrostachys:0.006125574273,(Geonoma_brevispatha:0.006125574273,Geonoma_deversa:0.006125574273):0):0):0)Geonoma_ott868423:0.02297090352,(Chamaedorea_elegans:0.001531393568,Chamaedorea_radicalis:0.001531393568)Chamaedorea_ott736873:0.02756508423):0):0):0):0):0):0.01684532925,((Borassus_aethiopum:0.006125574273,((Sabal_yapa:0.001531393568,Sabal_minor:0.001531393568)Sabal_ott104307:0.004594180704,(Thrinax_radiata:0.001531393568,Coccothrinax_readii:0.001531393568)Cryosophileae_ott889448:0.004594180704):0)Coryphoideae_ott491536:0.03981623277,((Daemonorops_poilanei:0.003062787136,(Calamus_rhabdocladus:0.001531393568,Calamus_platyacanthos:0.001531393568)Calamus_ott452625:0.001531393568)Calaminae_ott20553:0.004594180704,(Mauritia_flexuosa:0.003062787136,(Laccosperma_secundiflorum:0.001531393568,Eremospatha_macrocarpa:0.001531393568)Ancistrophyllinae_ott20556:0.001531393568)Lepidocaryeae_ott20555:0.004594180704)Calamoideae_ott102447:0.0382848392):0)Arecaceae_ott526437:0.01990811639,(((Calathea_marantifolia:0.003062787136,(Calathea_micans:0.003062787136,Calathea_ovandensis:0.003062787136):0)Calathea_ott156264:0.003062787136,(Heliconia_metallica:0.001531393568,Heliconia_acuminata:0.001531393568)Heliconia_ott730914:0.004594180704)Zingiberales_ott627015:0.01225114855,(((Murdannia_nudiflora:0.001531393568,Murdannia_simplex:0.001531393568):0.003062787136,(Commelina_benghalensis:0.001531393568,Commelina_bracteosa:0.001531393568):0.003062787136):0.006125574273,((Tradescantia_fluminensis:0.001531393568,Tradescantia_blossfeldiana:0.001531393568):0.003062787136,(Tradescantia_zebrina:0.001531393568,Tradescantia_brevifolia:0.001531393568):0.003062787136)Tradescantia_ott877742:0.006125574273)Commelinaceae_ott877745:0.007656967841):0.04747320061):0.07963246554)commelinids_ott225270:0.05359877489):0.02756508423,((Erythronium_japonicum:0.01378254211,(Clintonia_borealis:0.01378254211,((Calochortus_obispoensis:0.007656967841,(Calochortus_tiburonensis:0.007656967841,(Calochortus_lyallii:0.007656967841,(Calochortus_albus:0.007656967841,(Calochortus_pulchellus:0.007656967841,Calochortus_macrocarpus:0.007656967841):0):0):0):0)Calochortus_ott121708:0.006125574273,(Fritillaria_camschatcensis:0.001531393568,Fritillaria_meleagris:0.001531393568)Fritillaria_ott172933:0.01225114855):0):0)Liliaceae_ott781605:0.01225114855,((Disporum_smilacinum:0.001531393568,Disporum_sessile:0.001531393568)Disporum_ott739640:0.02450229709,(Chamaelirium_luteum:0.007656967841,(Trillium_grandiflorum:0.006125574273,(Trillium_camschatcense:0.006125574273,(Trillium_ovatum:0.006125574273,(Trillium_persistens:0.006125574273,Trillium_apetalon:0.006125574273):0):0):0)Trillium_ott76108:0.001531393568)Melanthiaceae_ott430236:0.01837672282):0)Liliales_ott258488:0.2006125574):0.001531393568):0.009188361409):0.663093415):0.01531393568,(Asarum_canadense:0.01378254211,(((Magnolia_salicifolia:0.003062787136,(Magnolia_fordiana:0.003062787136,Magnolia_dealbata:0.003062787136):0)Magnolia_ott288480:0.004594180704,(Virola_surinamensis:0.003062787136,(Duguetia_neglecta:0.001531393568,Oxandra_asbeckii:0.001531393568)Annonaceae_ott98426:0.001531393568):0.004594180704)Magnoliales_ott288466:0.004594180704,(Chlorocardium_rodiei:0.003062787136,(Lindera_benzoin:0.001531393568,Lindera_umbellata:0.001531393568)Lindera_ott498682:0.001531393568)Lauraceae_ott913246:0.009188361409):0.001531393568)Magnoliidae_ott31010:0.9019908116)Mesangiospermae_ott5298374:0.06125574273)Spermatophyta_ott10218:0.007656967841,(Botrychium_mormo:0.006125574273,((Polystichum_setiferum:0.001531393568,Polystichum_aculeatum:0.001531393568)Polystichum_ott667493:0.003062787136,(Asplenium_scolopendrium:0.001531393568,Asplenium_cuneifolium:0.001531393568):0.003062787136):0.001531393568)Moniliformopses_ott166292:0.97856049)Euphyllophyta_ott1007992:0.006125574272,(Gracilaria_gracilis:0.003062787136,(Gelidium_sesquipedale:0.003062787136,Mazzaella_splendens:0.003062787136):0)Rhodymeniophycidae_ott5275832:0.9877488515):0.009188361409,((Tolumnia:0.003062787136,(Simulium_erectum:0.001531393568,Perigonia_glaucescens:0.001531393568):0.001531393568):0.004594180704,(Coprinopsis_cinerea:0.003062787136,(Vulpicida_pinastri:0.001531393568,Lepraria_sanguinolenta:0.001531393568)Lecanorales_ott306155:0.001531393568)Division=Dikarya_ott5602101:0.004594180704)Opisthokonta_ott332573:0.9923430322)Eukaryota_ott304358;");
	}

	// default viewing options (can be changed with buttons when running)
	var polytype = 3; // the way polytomies are expressed (should be 0,1,2 or 3)
	var viewtype = 2; // the default viewtype (should be 1,2,3,4 or 5)
	var colourtype = 3; // the default colour mode - note: if doing further editing of colour palette's below this may become irrelevant
	// colourtype = 3 is only suited for redlist data
	var leaftype = 2; // leaf shape circular or natural - this cannpt be changed with buttons it is recommended you leave it
	
	var fonttype = 'Helvetica'; // change the text font to match the rest of your article and journal style // 'sans-serif' // is good too
	var intnodetextcolor = 'rgb(255,255,255)' // for interior node text colour where there is a name to be put
	// note there are more advanced options later to change th interior node text
	var backgroundcolor = 'rgb(255,255,200)' //background color 'null' if no background is wanted
	var outlineboxcolor = 'rgb(0,0,0)' // outline box colour
	
	// colour codes for redlist
	function redlistcolor(codein)
	{
		switch(codein)
		{
			case "EX":
			return ('rgb(0,0,180)');
			case "EW":
			return ('rgb(60,50,135)');
			case "CR":
			return ('rgb(220,0,0)');
			case "EN":
			return ('rgb(125,30,00)');
			case "VU":
			return ('rgb(85,85,30)');
			case "NT":
			return ('rgb(65,120,0)');
			case "LC":
			return ('rgb(0,220,0)');
			case "DD":
			return ('rgb(80,80,80)');
			case "NE":
			return ('rgb(0,0,0)');
			default:
			return ('rgb(0,0,0)');
		}
	}
	
	// definition of geological periods 
	function gpmapper(datein)
	{
		if (datein > 253.8)
		{
			return("pre Triassic");
		}
		else
		{
			if (datein > 203.6)
			{
				return("Triassic");
			}
			else
			{
				if (datein > 150.8)
				{
					return("Jurassic");
				}
				else
				{
					if (datein > 70.6)
					{
						return("Cretaceous");
					}
					else
					{
						if (datein > 28.4)
						{
							return("Paleogene");
						}
						else
						{
							if (datein > 3.6)
							{
								return("Neogene");
							}
							else
							{
								return("Quaternary");
							}	
						}	
					}	
				}	
			}
		}
		
	}
	
	midnode.prototype.leafcolor1 = function() 
	{
		// for the leaf fill
		if ((this.redlist)&&(colourtype == 3))
		{
			return(redlistcolor(this.redlist));
		}
		else
		{
			if (colourtype == 3)
			{
				return (this.branchcolor());
			}
			else
			{
				return ('rgb(0,100,0)');
			}
		}
	}
	
	
	midnode.prototype.leafcolor2 = function() 
	{
		// for the leaf outline
		if ((this.redlist)&&(colourtype == 3))
		{
			return(redlistcolor(this.redlist));
		}
		else
		{
			if (colourtype == 3)
			{
				return (this.branchcolor());
			}
			else
			{
				return ('rgb(0,100,0)');
			}
		}
	}
	
	midnode.prototype.leafcolor3 = function() 
	{
		return ('rgb(255,255,255)'); // for the leaf text 
	}
	
	midnode.prototype.hitstextcolor = function() 
	{
		// for text showing number of hits in each interior node (for search function)
		if ((this.npolyt)||(polytype == 3))
		{
			return ('rgb(255,255,255)');
		}
		else
		{
			return this.branchcolor(); 
		} 
	}
	
	midnode.prototype.branchcolor = function() // branch colour logic
	{
		// this script sets the colours of the branches
		var colortoreturn = 'rgb(100,75,50)';
		if (colourtype == 2) // there are two different color schemes in this version described by the colourtype variable
		{
			// this.lengthbr is the date of the node
			// timelim is the cut of date beyond which the tree is not drawn (when using growth animation functions
			if ((this.lengthbr<150.8)&&(timelim<150.8)) 
			{
				colortoreturn =  'rgb(180,50,25)';
			}
			if ((this.lengthbr<70.6)&&(timelim<70.6))
			{
				colortoreturn =  'rgb(50,25,50)';
			}
		}
		else
		{
			
			var conservation = (4*(this.num_CR) + 3*(this.num_EN) + 2*(this.num_VU) + this.num_NT);
			var num_surveyed = (this.num_CR + this.num_EN + this.num_VU + this.num_NT + this.num_LC);
			if (colourtype == 3)
			{
				if (num_surveyed == 0)
				{
					if (((this.num_NE >= this.num_DD)&&(this.num_NE >= this.num_EW))&&(this.num_NE >= this.num_EX))
					{
						colortoreturn = redlistcolor("NE");
					}
					else
					{
						if ((this.num_DD >= this.num_EX)&&(this.num_DD >= this.num_EW))
						{
							colortoreturn = redlistcolor("DD");
						}
						else
						{
							if (this.num_EW >= this.num_EX)
							{
								colortoreturn = redlistcolor("EW");
							}
							else
							{
								colortoreturn = redlistcolor("EX");
							}
						}
					}
				}
				else
				{
					if ((conservation/num_surveyed)>3.5)
					{
						colortoreturn = redlistcolor("CR");
					}
					else
					{
						if ((conservation/num_surveyed)>2.5)
						{
							colortoreturn = redlistcolor("EN");
						}
						else
						{
							if ((conservation/num_surveyed)>1.5)
							{
								colortoreturn = redlistcolor("VU");
							}
							else
							{
								if ((conservation/num_surveyed)>0.5)
								{
									colortoreturn = redlistcolor("NT");
								}
								else
								{
									colortoreturn = redlistcolor("LC");
								}
							}
						}
					}
				}
			}
		}
		// the current logic uses different colorschemes for pre, post and during the Cretaceous period, if color type = 2 
		// otherwise it uses a fixed brown color for the branches
		// when the tree is growing it only allows branches to be coloured for a certain period if the tree has already growed up to that period.
		return colortoreturn;
	}
	
	midnode.prototype.barccolor = function() // branch outline colour logic
	{
		// this script sets the color for the outline of the branches
		var colortoreturn = 'rgb(50,37,25)';
		if (colourtype == 2)
		{
			if((this.lengthbr<70.6)&&(timelim<70.6))
			{
				colortoreturn = 'rgb(200,200,200)';
			}
		}
		if (colourtype == 3)
		{
			colortoreturn = 'rgb(0,0,0)';
		}
		return colortoreturn;
	}
	
	midnode.prototype.highlightcolor = function() // highlight colour logic
	{
		// this logic defines the stripe colors that indicate search results, but could be edited to indicate other features such as traits
		return 'rgb('+(Math.round(255-254*this.searchin/numhits)).toString()+','+(Math.round(255-254*this.searchin/numhits)).toString()+','+(Math.round(255-254*this.searchin/numhits)).toString()+')';
	}
	
	midnode.prototype.datetextcolor = function() // date text colour logic
	{
		var colortoreturn = 'rgb(255,120,100)';
		if (colourtype == 2)
		{
			if ((this.lengthbr<150.8)&&(this.lengthbr>70.6))
			{
				colortoreturn = 'rgb(0,0,0)';
			}
		}
		if (colourtype == 3)
		{
			colortoreturn = 'rgb(255,255,255)';
		}
		return colortoreturn;
	}
	
	midnode.prototype.richnesstextcolor = function() // richness text colour logic
	{
		var colortoreturn = 'rgb(200,200,255)';
		if (colourtype == 2)
		{
			if ((this.lengthbr<150.8)&&(this.lengthbr>70.6))
			{
				colortoreturn = 'rgb(0,0,250)';
			}
		}
		if (colourtype == 3)
		{
			colortoreturn = 'rgb(255,255,255)';
		}
		return colortoreturn;
	}
	
	// it is not advisable to edit below this point unless you are trying to sort out the display of custom trait data
	
	// *** there are three types of leaves that are drawn by the code
	// *** 1.) Fake leaf: where the tree continues but is smaller than the size threshold it is sometimes
	// *** asthetically pleasing to draw a leaf there, especially if the threshold is a few pixels wide.  If the threshold is much smaller it does not matter if the facke leaf is drawn or not.
	// *** 2.) Growth leaf: where growing animations are taking place there should be leaves on the tips of the branches
	// *** 3.) Tip leaf: these are the classic leaves in which species names are put - these are the tips of the complete tree.
	// *** all leaf classes can be defined with custom logic in the three scripts below
	
	midnode.prototype.fakeleaflogic = function(x,y,r,angle)
	{
		context.strokeStyle = this.leafcolor2();
		context.fillStyle = this.leafcolor1();	
		if (leaftype == 1)
		{
			drawleaf1(x,y,r);
		}
		else
		{
			drawleaf2(x,y,r,angle);
		}
	}
	
	midnode.prototype.growthleaflogic = function(x,y,r,angle)
	{
		context.strokeStyle = this.leafcolor2();
		context.fillStyle = this.leafcolor1();	
		if (leaftype == 1)
		{
			drawleaf1(x,y,r);
		}
		else
		{
			drawleaf2(x,y,r,angle);
		}
	}
	
	midnode.prototype.tipleaflogic = function(x,y,r,angle)
	{
		context.strokeStyle = this.leafcolor2();
		context.fillStyle = this.leafcolor1();	
		if (leaftype == 1)
		{
			drawleaf1(x,y,r);
		}
		else
		{
			drawleaf2(x,y,r,angle);
		}
	}
	
	
	// drawing the tree
	midnode.prototype.draw = function()
	{
		var x ;
		var y ;
		var r ;
		if(this.dvar)
		{
			if (this.rvar)
			{
				x = this.xvar;
				y = this.yvar;
				r = this.rvar;
			}
			if ((this.child1)&&(this.lengthbr > timelim))
			{
				if ((this.child1.richness_val) >= (this.child2.richness_val))
				{
					this.child1.draw ();
					this.child2.draw ();
				}
				else
				{
					this.child2.draw ();
					this.child1.draw ();
				}
			}
			var ing = false; // if we are in the region where graphics need to be drawn
			if((this.gvar)&&((polytype!=2)||(this.npolyt)))
			{
				
				ing = true;
				context.lineCap = "round";
				context.lineWidth = r*(this.bezr);
				context.beginPath();
				context.moveTo(x+r*(this.bezsx),y+r*this.bezsy);
				context.bezierCurveTo(x+r*(this.bezc1x),y+r*(this.bezc1y),x+r*(this.bezc2x),y+r*(this.bezc2y),x+r*(this.bezex),y+r*(this.bezey));
				context.strokeStyle = this.branchcolor();
				context.stroke();
				if ((highlight_search)&&(this.searchin > 0)) 
				{
					context.lineWidth = r*(this.bezr)/3;
					context.strokeStyle = 'rgb(255,255,255)';
					context.beginPath();
					context.moveTo(x+r*(this.bezsx),y+r*this.bezsy);
					context.bezierCurveTo(x+r*(this.bezc1x),y+r*(this.bezc1y),x+r*(this.bezc2x),y+r*(this.bezc2y),x+r*(this.bezex),y+r*(this.bezey));
					context.stroke();
					context.strokeStyle = this.highlightcolor();
					context.lineWidth = r*(this.bezr)/5.0;
					context.beginPath();
					context.moveTo(x+r*(this.bezsx),y+r*this.bezsy);
					context.bezierCurveTo(x+r*(this.bezc1x),y+r*(this.bezc1y),x+r*(this.bezc2x),y+r*(this.bezc2y),x+r*(this.bezex),y+r*(this.bezey));
					context.stroke();
				}
			}
			if (this.lengthbr > timelim)
			{
				if (((this.richness_val > 1)&&(r<=threshold))&&(timelim <= 0))
				{
					// we are drawing a fake leaf - ing is irrelevant as this is instead of drawing the children
					this.fakeleaflogic(x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*leafmult*0.75*partc,this.arca);
				}
				else
				{
					if (ing)
					{
						if (this.richness_val > 1)
						{
							if (this.lengthbr > timelim)
							{
								// interior node drawing starts here 
								// first set up the variables that decide text size
								var temp_twidth = (r*partc-r*partl2)*Twidth;
								var temp_theight = (r*partc-r*partl2)*Tsize/2.0;
								var temp_theight_2 = (r*partc-r*partl2)*Tsize/3.0;
								// this piece of logic draws the arc background if needed (no text)
								if ((highlight_search)&&(this.searchin > 0))
								{
									context.beginPath();
									context.arc(x+r*(this.arcx),y+r*this.arcy,r*this.arcr*(1-partl2/2.0),0,Math.PI*2,true);
									if ((this.npolyt)||(polytype == 3))
									{
										context.fillStyle = this.branchcolor();
									}
									else
									{
										context.fillStyle = this.highlightcolor();
									}
									context.fill();
								}
								if (((this.npolyt)||((highlight_search)&&(this.searchin > 0)))||(polytype == 3))
								{
									// we are drawing an internal circle
									context.beginPath();
									context.arc(x+r*(this.arcx),y+r*this.arcy,r*this.arcr*(1-partl2/2.0),0,Math.PI*2,true);
									context.lineWidth = r*this.arcr*partl2;
									context.strokeStyle = this.barccolor();
									context.stroke();
								}
								// internal text drawing starts here *****
								if ((this.npolyt)||(polytype == 3))
								{	
									if (datahastraits)
									{
									// drawing internal text
									if ( r > threshold*7)
									{
										// DRAW	PIECHARTS
										
										if (r > threshold*45)
										{
											
											context.fillStyle = 'rgb(255,255,255)';
											
											context.beginPath();
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/3.3,0,Math.PI*2,true);
											context.fill();
											
											if (r > threshold*250)
											{
												
												for (i = 0 ; i < 9 ; i ++)
												{
													context.beginPath();
													context.arc(x+r*this.arcx+temp_theight*i*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.05,0,Math.PI*2,true);
													context.fill();
												}
												context.fillStyle = redlistcolor("EX");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("EW");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("CR");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("EN");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("VU");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("NT");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("LC");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("DD");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = redlistcolor("NE");
												context.beginPath();
												context.arc(x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,0,Math.PI*2,true);
												context.fill();
												context.fillStyle = this.leafcolor3();
												autotext(false,"EX", x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"EW", x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"CR", x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"EN", x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"VU", x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"NT", x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"LC", x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"DD", x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,"NE", x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.09,temp_theight*0.04,temp_theight*0.04);
												autotext(false,conconvert("EX"), x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("EW"), x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("CR"), x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("EN"), x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("VU"), x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("NT"), x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("LC"), x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("DD"), x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												autotext(false,conconvert("NE"), x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.12,temp_theight*0.04,temp_theight*0.005);
												
												autotext(false,(Math.round(10000.0*(this.num_EX/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_EW/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_CR/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_EN/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_VU/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_NT/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_LC/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_DD/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												autotext(false,(Math.round(10000.0*(this.num_NE/this.richness_val))/100.0).toString() + " %", x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.045,temp_theight*0.04,temp_theight*0.008);
												
												autotext(false,(this.num_EX).toString() + " species", x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_EW).toString() + " species", x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_CR).toString() + " species", x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_EN).toString() + " species", x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_VU).toString() + " species", x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_NT).toString() + " species", x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_LC).toString() + " species", x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_DD).toString() + " species", x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												autotext(false,(this.num_NE).toString() + " species", x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.06,temp_theight*0.04,temp_theight*0.005);
												
												autotext(true,"Threatened", x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.132,temp_theight_2*0.04,temp_theight*0.005);
												autotext(true,"Threatened", x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.132,temp_theight_2*0.04,temp_theight*0.005);
												autotext(true,"Threatened", x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight_2*1.132,temp_theight_2*0.04,temp_theight*0.005);
											}
											
											var pieangle = 0;
											var newpieangle = pieangle+(this.num_LC/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}
											context.fillStyle = redlistcolor("LC")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle-0.1,newpieangle,false);
											pieangle +=(this.num_LC/this.richness_val)*Math.PI*2;
											context.fill();
											
											newpieangle = pieangle+(this.num_NT/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}
											context.fillStyle = redlistcolor("NT")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_NT/this.richness_val)*Math.PI*2;
											context.fill();
											
											newpieangle = pieangle+(this.num_VU/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("VU")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_VU/this.richness_val)*Math.PI*2;
											context.fill();
											newpieangle = pieangle+(this.num_EN/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("EN")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_EN/this.richness_val)*Math.PI*2;
											context.fill();
											newpieangle = pieangle+(this.num_CR/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("CR")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_CR/this.richness_val)*Math.PI*2;
											context.fill();
											newpieangle = pieangle+(this.num_EW/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("EW")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_EW/this.richness_val)*Math.PI*2;
											context.fill();
											newpieangle = pieangle+(this.num_EX/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("EX")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_EX/this.richness_val)*Math.PI*2;
											context.fill();
											newpieangle = pieangle+(this.num_DD/this.richness_val)*Math.PI*2 +0.1;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("DD")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_DD/this.richness_val)*Math.PI*2;
											context.fill();
											newpieangle = pieangle+(this.num_NE/this.richness_val)*Math.PI*2;
											if (newpieangle > Math.PI*2)
											{
												newpieangle = Math.PI*2;
											}

											context.fillStyle = redlistcolor("NE")
											context.beginPath();
											context.moveTo(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7);
											context.arc(x+r*this.arcx,y+r*this.arcy+temp_theight_2*1.7,temp_theight/4,pieangle,newpieangle,false);
											pieangle +=(this.num_NE/this.richness_val)*Math.PI*2;
											context.fill();
											
											context.fillStyle = intnodetextcolor;
											autotext(false,"conservation status" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.9,temp_twidth*0.5,temp_theight_2/5.0);
											
																						
										}
										
										// DO THE TEXT
									
										if ((this.child1)&&(this.lengthbr))
										{
											context.fillStyle = this.datetextcolor();
											if (this.lengthbr >10)
											{
												autotext(false,(Math.round((this.lengthbr)*10)/10.0).toString() + " Mya", x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.32,temp_twidth,temp_theight_2/1.5);
												autotext(false,gpmapper(this.lengthbr) + " Period", x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.82,temp_twidth,temp_theight_2/5.0);
											}
											else
											{
												if (this.lengthbr >1)
												{
													autotext(false,(Math.round((this.lengthbr)*100)/100.0).toString()  + " Mya", x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.32,temp_twidth,temp_theight_2/1.5);
													autotext(false,gpmapper(this.lengthbr) + " Period", x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.82,temp_twidth,temp_theight_2/5.0);
												}
												else
												{
													autotext(false,(Math.round((this.lengthbr)*10000)/10.0).toString()  + " Kya", x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.32,temp_twidth,temp_theight_2/1.5);
													autotext(false,gpmapper(this.lengthbr) + " Period", x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.82,temp_twidth,temp_theight_2/5.0);
												}
											}
										}
										
										var num_threatened = (this.num_CR + this.num_EN + this.num_VU);

										if ((this.inlabel == true)&&((this.name2) != null))
										{
											context.fillStyle = intnodetextcolor;
											autotext(true,this.name2 , x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.17,temp_twidth*1.35,temp_theight_2/1.5);
											
											context.fillStyle = this.richnesstextcolor();
											//*
											if (num_threatened > 0)
											{
												autotext(false,(this.richness_val).toString() + " species , " + (num_threatened).toString() + " threatened ( " + (Math.round((num_threatened)/(this.richness_val)*1000.0)/10.0).toString() + "% )" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.5,temp_twidth*1.2,temp_theight_2/4.3);
											}
											else
											{
												autotext(false,(this.richness_val).toString() + " species, none threatened" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.5,temp_twidth,temp_theight_2/4.3);
											}
											if(this.phylogenetic_diversity>1000.0) 
											{
												autotext(false,(Math.round(this.phylogenetic_diversity/100)/10.0).toString() + " billion years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.72,temp_twidth,temp_theight_2/5.0);
											}
											else
											{
												autotext(false,(Math.round(this.phylogenetic_diversity)).toString() + " million years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.72,temp_twidth,temp_theight_2/5.0);
											}
											
											var linkpos = 0;
											
											if ((this.npolyt)||(polytype != 2))
											{
												if ((highlight_search)&&(this.searchin > 0))
												{
													context.fillStyle = this.hitstextcolor();
													if (this.searchin > 1)
													{
														autotext(false,(this.searchin).toString() + " hits" ,  x+r*this.arcx-temp_theight_2*0.3,y+r*this.arcy-temp_theight_2*1.95,temp_twidth*0.5,temp_theight_2*0.2);
													}
													else
													{
														autotext(false,"1 hit" ,  x+r*this.arcx-temp_theight_2*0.3,y+r*this.arcy-temp_theight_2*1.95,temp_theight_2*0.6,temp_theight_2*0.2);
													}
													linkpos = temp_theight_2*0.45;
												}
											}
											if ( r > threshold*100)
											{
												if ((this.linkclick)&&((!this.child1.linkclick)&&(!this.child2.linkclick)))
												{
													context.fillStyle = 'rgb(0,0,0)';
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.12,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = 'rgb(255,255,255)';
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.1,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = intnodetextcolor;
													context.fillStyle = 'rgb(0,0,0)';
													
													autotext(true,"Wikipedia", x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.17,temp_theight_2/10.0);
												}
												else
												{
													context.fillStyle = 'rgb(255,255,255)';
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.12,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = this.branchcolor();
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.1,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = intnodetextcolor;
													context.fillStyle = 'rgb(255,255,255)';
													
													autotext(true,"Wikipedia", x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.17,temp_theight_2/10.0);
												}
											}
										}
										else
										{
											
											context.fillStyle = this.richnesstextcolor();
											autotext(false,(this.richness_val).toString() + " species",  x+r*this.arcx,y+r*this.arcy+temp_theight_2*-0.17,temp_twidth*1.35,temp_theight_2/1.5);
											
											if (num_threatened > 0)
											{
												if (num_threatened > 1)
												{
													autotext(false,(num_threatened).toString() + " of " + (this.richness_val).toString() + " species are threatened ( " + (Math.round((num_threatened)/(this.richness_val)*1000.0)/10.0).toString() + "% )" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.45,temp_twidth,temp_theight_2/5.0);
												}
												else
												{
													autotext(false,(num_threatened).toString() + " of " + (this.richness_val).toString() + " species is threatened ( " + (Math.round((num_threatened)/(this.richness_val)*1000.0)/10.0).toString() + "% )" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.45,temp_twidth,temp_theight_2/5.0);
												}
											}
											else
											{
												autotext(false,"no threatened species" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.45,temp_twidth*0.75,temp_theight_2/5.0);
											}
											if(this.phylogenetic_diversity>1000.0) 
											{
												autotext(false,(Math.round(this.phylogenetic_diversity/100)/10.0).toString() + " billion years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.65,temp_twidth,temp_theight_2/5.0);
											}
											else
											{
												autotext(false,(Math.round(this.phylogenetic_diversity)).toString() + " million years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.65,temp_twidth,temp_theight_2/5.0);
											}
											
											if ((this.npolyt)||(polytype != 2))
											{
												if ((highlight_search)&&(this.searchin > 0))
												{
													context.fillStyle = this.hitstextcolor();
													if (this.searchin > 1)
													{
														autotext(false,(this.searchin).toString() + " hits" ,  x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.85,temp_twidth*0.5,temp_theight_2*0.2);
													}
													else
													{
														autotext(false,"1 hit" ,  x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.85,temp_twidth*0.5,temp_theight_2*0.2);
													}
													
												}
											}
											
										}
									}
									}
									else
									{
									if ((this.child1)&&(this.lengthbr))
										{
											context.fillStyle = this.datetextcolor();
											if (this.lengthbr >10)
											{
												autotext(false,(Math.round((this.lengthbr)*10)/10.0).toString() + " Mya", x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.32,temp_twidth,temp_theight_2/1.5);
												autotext(false,gpmapper(this.lengthbr) + " Period", x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.82,temp_twidth,temp_theight_2/5.0);
											}
											else
											{
												if (this.lengthbr >1)
												{
													autotext(false,(Math.round((this.lengthbr)*100)/100.0).toString()  + " Mya", x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.32,temp_twidth,temp_theight_2/1.5);
													autotext(false,gpmapper(this.lengthbr) + " Period", x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.82,temp_twidth,temp_theight_2/5.0);
												}
												else
												{
													autotext(false,(Math.round((this.lengthbr)*10000)/10.0).toString()  + " Kya", x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.32,temp_twidth,temp_theight_2/1.5);
													autotext(false,gpmapper(this.lengthbr) + " Period", x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.82,temp_twidth,temp_theight_2/5.0);
												}
											}
										}
										if ((this.inlabel == true)&&((this.name2) != null))
										{
											context.fillStyle = intnodetextcolor;
											autotext(true,this.name2 , x+r*this.arcx,y+r*this.arcy-temp_theight_2*0.17,temp_twidth*1.35,temp_theight_2/1.5);
											
											context.fillStyle = this.richnesstextcolor();
											//*
											autotext(false,(this.richness_val).toString() + " species" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.5,temp_twidth*1.2,temp_theight_2/4.3);
											
											if(this.phylogenetic_diversity>1000.0) 
											{
												autotext(false,(Math.round(this.phylogenetic_diversity/100)/10.0).toString() + " billion years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.72,temp_twidth,temp_theight_2/5.0);
											}
											else
											{
												autotext(false,(Math.round(this.phylogenetic_diversity)).toString() + " million years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.72,temp_twidth,temp_theight_2/5.0);
											}
											
											var linkpos = 0;
											
											if ((this.npolyt)||(polytype != 2))
											{
												if ((highlight_search)&&(this.searchin > 0))
												{
													context.fillStyle = this.hitstextcolor();
													if (this.searchin > 1)
													{
														autotext(false,(this.searchin).toString() + " hits" ,  x+r*this.arcx-temp_theight_2*0.3,y+r*this.arcy-temp_theight_2*1.95,temp_twidth*0.5,temp_theight_2*0.2);
													}
													else
													{
														autotext(false,"1 hit" ,  x+r*this.arcx-temp_theight_2*0.3,y+r*this.arcy-temp_theight_2*1.95,temp_theight_2*0.6,temp_theight_2*0.2);
													}
													linkpos = temp_theight_2*0.45;
												}
											}
											if ( r > threshold*100)
											{
												if ((this.linkclick)&&((!this.child1.linkclick)&&(!this.child2.linkclick)))
												{
													context.fillStyle = 'rgb(0,0,0)';
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.12,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = 'rgb(255,255,255)';
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.1,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = intnodetextcolor;
													context.fillStyle = 'rgb(0,0,0)';
													
													autotext(true,"Wikipedia", x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.17,temp_theight_2/10.0);
												}
												else
												{
													context.fillStyle = 'rgb(255,255,255)';
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.12,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = this.branchcolor();
													context.beginPath();
													context.arc(x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.1,0,Math.PI*2,true);
													context.fill();
													context.fillStyle = intnodetextcolor;
													context.fillStyle = 'rgb(255,255,255)';
													
													autotext(true,"Wikipedia", x+r*this.arcx+linkpos,y+r*this.arcy-temp_theight_2*1.95,temp_theight*0.17,temp_theight_2/10.0);
												}
											}
										}
										else
										{
											
											context.fillStyle = this.richnesstextcolor();
											autotext(false,(this.richness_val).toString() + " species",  x+r*this.arcx,y+r*this.arcy+temp_theight_2*-0.17,temp_twidth*1.35,temp_theight_2/1.5);
				
											if(this.phylogenetic_diversity>1000.0) 
											{
												autotext(false,(Math.round(this.phylogenetic_diversity/100)/10.0).toString() + " billion years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.65,temp_twidth,temp_theight_2/5.0);
											}
											else
											{
												autotext(false,(Math.round(this.phylogenetic_diversity)).toString() + " million years total phylogenetic diversity" ,  x+r*this.arcx,y+r*this.arcy+temp_theight_2*0.65,temp_twidth,temp_theight_2/5.0);
											}
											
											if ((this.npolyt)||(polytype != 2))
											{
												if ((highlight_search)&&(this.searchin > 0))
												{
													context.fillStyle = this.hitstextcolor();
													if (this.searchin > 1)
													{
														autotext(false,(this.searchin).toString() + " hits" ,  x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.85,temp_twidth*0.5,temp_theight_2*0.2);
													}
													else
													{
														autotext(false,"1 hit" ,  x+r*this.arcx,y+r*this.arcy-temp_theight_2*1.85,temp_twidth*0.5,temp_theight_2*0.2);
													}
													
												}
											}
											
										}
									}
								}
								else
								{
									// polytomy node filling
									if (polytype ==1)
									{
										context.beginPath();
										context.arc(x+r*(this.arcx),y+r*this.arcy,r*this.arcr,0,Math.PI*2,true);
										context.fillStyle = this.barccolor();
										context.fill();
									}
								}
								// draw number of hits / number threatened
							}
						}
						else
						{
							// we are drawing a leaf
							this.tipleaflogic(x+((r)*this.arcx),y+(r)*this.arcy,r*this.arcr,this.arca);
							if ( (r*leafmult) > threshold*10)
							{
								this.leafdetail(x,y,r,leafmult,partc,partl2,Twidth,Tsize);
							}	
						}
					}
				}
			}
			if (this.lengthbr <= timelim)
			{
				if (this.richness_val > 1)
				{
					this.growthleaflogic(x+((r)*(this.arcx)),y+(r)*(this.arcy),r*leafmult*0.5*partc,this.arca);
				}
				else
				{
					this.tipleaflogic(x+((r)*this.arcx),y+(r)*this.arcy,r*this.arcr,this.arca);
					if ( (r*leafmult) > threshold*10)
					{
						this.leafdetail(x,y,r,leafmult,partc,partl2,Twidth,Tsize);
					}	
				}
			}
		}
	}
	
	midnode.prototype.leafdetail = function(x,y,r,leafmult,partc,partl2,Twidth,Tsize)
	{
		if ( r > threshold*6)
		{
			var temp_twidth = (r*leafmult*partc-r*leafmult*partl2)*Twidth;
			var temp_theight = ((r*leafmult*partc-r*leafmult*partl2)*Tsize/3.0);
			
			if (temp_theight*0.2 > threshold/2.5)
			{
				if (this.linkclick)
				{
					context.fillStyle = 'rgb(0,0,0)';
					context.beginPath();
					context.arc(x+r*this.arcx,y+r*this.arcy-temp_theight*1.75,temp_theight*0.2,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = 'rgb(255,255,255)';
					context.beginPath();
					context.arc(x+r*this.arcx,y+r*this.arcy-temp_theight*1.75,temp_theight*0.15,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = 'rgb(0,0,0)';
					autotext(true,"Wikipedia", x+r*this.arcx,y+r*this.arcy-temp_theight*1.75,temp_twidth*0.1,temp_theight*0.5);
				}
				else
				{
					context.fillStyle = 'rgb(255,255,255)';
					context.beginPath();
					context.arc(x+r*this.arcx,y+r*this.arcy-temp_theight*1.75,temp_theight*0.2,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = this.leafcolor2();
					context.beginPath();
					context.arc(x+r*this.arcx,y+r*this.arcy-temp_theight*1.75,temp_theight*0.15,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = this.leafcolor3();
					autotext(true,"Wikipedia", x+r*this.arcx,y+r*this.arcy-temp_theight*1.75,temp_twidth*0.1,temp_theight*0.5);
				}
			}
			
			context.fillStyle = this.leafcolor3();
			
			if (datahastraits)
			{
				if (this.cname)
				{
					if (this.hasname2)
					{
						autotext(true,this.name2 + " " + this.name1, x+r*this.arcx,y+r*this.arcy-temp_theight*1.2,temp_twidth*1,temp_theight*0.5);
					}
					else
					{
						autotext(true,this.name1, x+r*this.arcx,y+r*this.arcy-temp_theight*1.2,temp_twidth*1,temp_theight*0.5);
					}
					autotext2(false,this.cname,x+r*this.arcx,y+r*this.arcy,temp_twidth*1.6,temp_theight*0.75);
				}
				else
				{
					autotext(false,"No common name", x+r*this.arcx,y+r*this.arcy-temp_theight*1.2,temp_twidth*1,temp_theight*0.5);
					if (this.hasname2)
					{
						autotext2(true,this.name2 + " " + this.name1,x+r*this.arcx,y+r*this.arcy,temp_twidth*1.6,temp_theight*0.75);
					}
					else
					{
						autotext2(true,this.name1,x+r*this.arcx,y+r*this.arcy,temp_twidth*1.6,temp_theight*0.75);
					}
				}
				autotext(false,"Conservation status: " + this.redlist + " , " + "population " + this.poptxt() , x+r*this.arcx,y+r*this.arcy+temp_theight*1.6,temp_twidth*1.2,temp_theight*0.15);
				autotext(false,this.extxt() , x+r*this.arcx,y+r*this.arcy+temp_theight*1.2,temp_twidth*1.4,temp_theight*0.5);
				
				if (temp_theight*0.05 > threshold*1.5)
				{
					context.fillStyle = this.leafcolor3();
					
					for (i = 0 ; i < 9 ; i ++)
					{
						context.beginPath();
						context.arc(x+r*this.arcx+temp_theight*i*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.05,0,Math.PI*2,true);
						context.fill();
					}
					
					context.fillStyle = redlistcolor("EX");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("EW");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("CR");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("EN");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("VU");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("NT");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("LC");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("DD");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = redlistcolor("NE");
					context.beginPath();
					context.arc(x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,0,Math.PI*2,true);
					context.fill();
					context.fillStyle = this.leafcolor3();
					autotext(false,"EX", x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"EW", x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"CR", x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"EN", x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"VU", x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"NT", x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"LC", x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"DD", x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,"NE", x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.9,temp_theight*0.04,temp_theight*0.04);
					autotext(false,conconvert("EX"), x+r*this.arcx+temp_theight*0*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("EW"), x+r*this.arcx+temp_theight*1*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("CR"), x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("EN"), x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("VU"), x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("NT"), x+r*this.arcx+temp_theight*5*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("LC"), x+r*this.arcx+temp_theight*6*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("DD"), x+r*this.arcx+temp_theight*7*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(false,conconvert("NE"), x+r*this.arcx+temp_theight*8*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.921,temp_theight*0.04,temp_theight*0.005);
					autotext(true,"Threatened", x+r*this.arcx+temp_theight*2*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.879,temp_theight*0.04,temp_theight*0.005);
					autotext(true,"Threatened", x+r*this.arcx+temp_theight*3*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.879,temp_theight*0.04,temp_theight*0.005);
					autotext(true,"Threatened", x+r*this.arcx+temp_theight*4*0.15-4*0.15*temp_theight,y+r*this.arcy+temp_theight*1.879,temp_theight*0.04,temp_theight*0.005);
				}
			}
			else
			{
				if (this.hasname2)
				{
					autotext2(true,this.name2 + " " + this.name1,x+r*this.arcx,y+r*this.arcy,temp_twidth*1.6,temp_theight*0.75);
				}
				else
				{
					autotext2(true,this.name1,x+r*this.arcx,y+r*this.arcy,temp_twidth*1.6,temp_theight*0.75);
				}
			}
		}
	}
	
	function performsearch2(toclear)
	{
		var changedvar = false;
		var stringin = document.forms["myform"]["tosearchfor"].value;
		
		stringin = stringin.replace("extinct in the wild", "EW");
		stringin = stringin.replace("extinct", "EX");
		stringin = stringin.replace("critically endangered", "CR");
		stringin = stringin.replace("endangered", "EN");
		stringin = stringin.replace("vulnerable", "VU");
		stringin = stringin.replace("near threatened", "NT");
		stringin = stringin.replace("least concern", "LC");
		stringin = stringin.replace("data deficient", "DD");
		stringin = stringin.replace("not evaluated", "NE");
		
		var searchinpartsnew = stringin.split(" ");
		
		if (searchinpartsnew.length == searchinparts.length)
		{
			for (i = 0 ; i < searchinpartsnew.length ; i ++)
			{
				if (searchinpartsnew[i] != searchinparts[i])
				{
					changedvar = true;
				}
			}
		}
		else
		{
			changedvar = true;
		}
		
		if (latin_search != (document.forms["myform"]["latinsearch"].checked))
		{
			changedvar = true;
			latin_search = (document.forms["myform"]["latinsearch"].checked)
		}
		if (common_search != (document.forms["myform"]["commonsearch"].checked))
		{
			changedvar = true;
			common_search = (document.forms["myform"]["commonsearch"].checked)
		}
		if (trait_search != (document.forms["myform"]["traitsearch"].checked))
		{
			changedvar = true;
			trait_search = (document.forms["myform"]["traitsearch"].checked)
		}
		
		if (!changedvar)
		{
			if (toclear)
			{
				fulltree.semiclearsearch();
			}
			changedvar = false;
		}
		else
		{
			fulltree.clearsearch();
			searchinparts = searchinpartsnew;
			numhits = fulltree.search();
			changedvar = true;
		}
		return changedvar;
	}
	
	midnode.prototype.searchone = function(stringin,leafonly)
	{
		var foundstr = 0;
		
		if (document.forms["myform"]["traitsearch"].checked)
		{
			if ((((stringin == "EX")||(stringin == "EW"))||(((stringin == "EN")||(stringin == "CR"))||((stringin == "VU")||(stringin == "NT"))))||(((stringin == "DD")||(stringin == "LC"))||(stringin == "NE")))
			{
				if (!(this.child1))
				{
					if ((this.redlist)&&(this.redlist == stringin))
					{
						foundstr +=this.richness_val;
					}
				}
			}
			else
			{
				if (((stringin.toLowerCase() == "increasing")&&(this.popstab))&&(this.popstab == "I"))
				{
					foundstr +=this.richness_val;
				}
				else
				{
					if (((stringin.toLowerCase() == "decreasing")&&(this.popstab))&&(this.popstab == "D"))
					{
						foundstr +=this.richness_val;
					}
					else
					{
						if (((stringin.toLowerCase() == "stable")&&(this.popstab))&&(this.popstab == "S"))
						{
							foundstr +=this.richness_val;
						}
						else
						{
							if ((stringin.toLowerCase() == "threatened")&&((this.redlist)&&(((this.redlist == "CR")||(this.redlist == "EN"))||(this.redlist == "VU"))))
							{
								foundstr +=this.richness_val;
							}
						}
					}
				}
			}
		}
		if (foundstr == 0 && (document.forms["myform"]["latinsearch"].checked))
		{
			
			if ((stringin.toLowerCase()) == stringin)
			{
				if (!((leafonly)&&(this.child1)))
				{
					if ((this.hasname1)&&((this.name1.toLowerCase()).search(stringin) != -1))
					{
						foundstr += this.richness_val;
					}
					else
					{
						if ((this.name2)&&((this.name2.toLowerCase()).search(stringin) != -1))
						{
							foundstr +=this.richness_val;
						}
						
					}
				}
			}
			else
			{
				if (!((leafonly)&&(this.child1)))
				{
					if ((this.hasname1)&&((this.name1).search(stringin) != -1))
					{
						foundstr += this.richness_val;
					}
					else
					{
						if ((this.name2)&&((this.name2).search(stringin) != -1))
						{
							foundstr +=this.richness_val;
						}
						
					}
				}
			}
			
		}
		
		if (foundstr == 0 && (document.forms["myform"]["commonsearch"].checked))
		{
			
			if ((stringin.toLowerCase()) == stringin)
			{
				if ((this.cname)&&((this.cname.toLowerCase()).search(stringin) != -1))
				{
					foundstr +=this.richness_val;
				}
			}
			else
			{
				if ((this.cname)&&((this.cname).search(stringin) != -1))
				{
					foundstr +=this.richness_val;
				}
			}
		}	
		return foundstr;
	}
	
	function midnode (x)
	{
		// all the graphics parameters referenced from the reference point and reference scale which are set once and changed only when the fractal form is changed
		
		// for bezier curve (basic graphics element 1 of 2)
		var bezsx; // start x position
		var bezsy; // start y position
		var bezex; // end x position
		var bezey; // end y position
		var bezc1x; // control point 1 x position
		var bezc1y; // control point 2 y position
		var bezc2x; // control point 2 x position
		var bezc2y; // control point 2 y position
		var bezr; // line width
		
		// for the circle (basic graphics element 2 of 2)
		var arcx; // centre x position
		var arcy; // centre y position
		var arcr; // radius
		var arca; // angle of the arc
		
		// for the horizon (the region within which all graphics elements of this node and all its child nodes are contained)
		var hxmin; // min x value
		var hxmax; // max x value
		var hymin; // min y value
		var hymax; // max y value
		
		// for the graphics box (the region within which all graphics elements of this node alone (excluding its children) are contained
		var gxmin; // min x value
		var gxmax; // max x value
		var gymin; // min y value
		var gymax; // max y value
		
		// for the flight box (frames the region that defines a nice flight to the target after a search)
		var fxmin; // min x value
		var fxmax; // max x value
		var fymin; // min y value
		var fymax; // max y value
		
		// for the reference points of the two children
		var nextx1; // x refernece point for both children
		var nexty1; // y reference point for both children
		var nextx2; // x refernece point for both children
		var nexty2; // y reference point for both children
		var nextr1; // r (scale) reference for child 1
		var nextr2; // r (scale) reference for child 2
		
		// stores the refernce point and reference scale which get updated with each redraw of the page
		var xvar; // x
		var yvar; // y 
		var rvar; // the value of r for the current view (null means nothign to draw)
		
		// variables indicating if drawing is needed for this node or its children updated with each redraw of the page
		var dvar; // true if this or its children need to be drawn
		var gvar; // true if graphics elements in this node itself need to be drawn
		
		// flight and search data
		var searchin = 0;
		var startscore = 0; // gives this node a score for being the starting node
		var onroute = false;
		var targeted = false;
		var searchinpast = 0;
		var flysofarA = false;
		var flysofarB = false;
		
		// other data
		var npolyt = true; // true if node is NOT a polytomy
		var graphref = false; // true for one path of nodes through the tree, the IFIG is anchored on the node at the end of that path 
		this.inlabel = false; // tells if the node has primary and secondary labels to be plotted 
		this.insublabel = false; 
		this.linkclick = false; // tells if a link has been clicked

		this.phylogenetic_diversity = 0.0;
		
		// This part of the code initialises the mode from newick format
		var bracketscount = 0;
		var cut;
		var end;
		
		if (x.charAt(x.length-1) == ';')
		{
			x = x.substr(0,x.length-1);
		}
		
		if (x.charAt(0) == '(')
		{
			for (i = 0; i < x.length ; i++)
			{
				if (x.charAt(i) == '(')
				{
					bracketscount ++;
				}
				if (x.charAt(i) == ')')
				{
					bracketscount --;
				}
				if (x.charAt(i) == ',')
				{
					if (bracketscount == 1)
					{
						cut = i;
					}
				}
				if (bracketscount == 0)
				{
					end = i;
					i = x.length +1;
				}
			}
			
			var cut1 = x.substr(1,cut-1);
			var cut2 = x.substr(cut+1,end-cut-1);
			var cutname = x.substr(end+1,x.length-end);
			// this is an interior node with name 'cutname'
			// the two children are given by cut1 ad cut2
			
			var lengthcut = -1;
			for (i = 0; i < cutname.length ; i++)
			{
				if (cutname.charAt(i) == ':')
				{
					lengthcut = i;
				}
			}
			if (lengthcut == -1)
			{
				this.lengthbr = null;
			}
			else
			{
				this.lengthbr = parseFloat(cutname.substr(lengthcut+1,(cutname.length)-lengthcut));
				cutname = cutname.substr(0,lengthcut);
			}
			
			// at this stage cutname does not have the length data associated with it
			
			if ((cutname.length > 0)&&(cutname!=((parseFloat(cutname)).toString())))			
			{
				this.hasname2 = false;
				this.hasname1 = true;
				this.name2 = null;
				this.name1 = cutname;
			}
			else
			{
				this.hasname2 = false;
				this.hasname1 = false;
				this.name2 = null;
				this.name1 = null;
				this.cname = null;
			}
			
			// initialise children
			this.child1 = new midnode(cut1,this);
			this.child2 = new midnode(cut2,this);
			// initialise interior node variables
			this.richness_val = 0;
		}
		else
		{
			this.child1 = null;
			this.child2 = null;
			this.richness_val =0; // these richness values are sorted out later
			
			var lengthcut = -1;
			for (i = 0; i < x.length ; i++)
			{
				if (x.charAt(i) == ':')
				{
					lengthcut = i;
				}
			}
			if (lengthcut == -1)
			{
				this.lengthbr = null;
			}
			else
			{
				this.lengthbr = parseFloat(x.substr(lengthcut+1,(x.length)-lengthcut));
				x = x.substr(0,lengthcut);
			}
			
			if (x.length > 0)
			{
				lengthcut = -1;
				for (i = 0; i < x.length ; i++)
				{
					if (x.charAt(i) == '{')
					{
						lengthcut = i;
						i = x.length;
					}
				}
				if (lengthcut == -1)
				{
					// no metadata
					datahastraits = false;
				}
				else
				{
					// metadata

					/// ***** LEAF NODE SORT START

					this.cname = x.substr(lengthcut+1,(x.length)-lengthcut-2)
					x = x.substr(0,lengthcut);
					
					//*
					lengthcut = -1;
					for (i = 0; i < this.cname.length ; i++)
					{
						if (this.cname.charAt(i) == '_')
						{
							lengthcut = i;
							i = this.cname.length;
						}
					}
					if (lengthcut == -1)
					{
						// no conservationdata
						this.popstab = "U";
						this.redlist = "NE";
					}
					else
					{	
						this.redlist = this.cname.substr(lengthcut+1,(this.cname.length)-lengthcut-3);
						this.popstab = this.cname.substr((this.cname.length)-1,1);
						this.cname = this.cname.substr(0,lengthcut);
					}			
				}
				
				
				lengthcut = -1;
				for (i = 0; i < x.length ; i++)
				{
					if (x.charAt(i) == '_')
					{
						lengthcut = i;
						i = x.length;
					}
				}
				if (lengthcut == -1)
				{
					this.hasname2 = false;
					this.hasname1 = true;
					this.name2 = null;
					this.name1 = x;
				}
				else
				{
					this.hasname2 = true;
					this.hasname1 = true;
					this.name1 = x.substr(lengthcut+1,(x.length)-lengthcut-1);
					this.name2 =  x.substr(0,lengthcut);
				}
			}
			else
			{
				this.hasname2 = false;
				this.hasname1 = false;
				this.name2 = null;
				this.name1 = null;
				datahastraits = false;
			}
		}
	}

	midnode.prototype.extxt = function() // returns text for redlist status
	{
		if (this.redlist)
		{
			return conconvert(this.redlist);
		}
		else
		{
			return ("Not Evaluated");
		}
	}

	midnode.prototype.poptxt = function() // returns text for redlist status
	{
		if (this.popstab)
		{
			switch(this.popstab)
			{
				case "D":
				return ("decreasing");
				case "I":
				return ("increasing");
				case "S":
				return ("stable");
				case "U":
				{
					if ((this.redlist == "EX")||(this.redlist == "EW"))
					{
						return ("extinct");	
					}
					else
					{
						return ("stability unknown");
					}
				}
				default:
				if ((this.redlist == "EX")||(this.redlist == "EW"))
				{
					return ("extinct");	
				}
				else
				{
					return ("stability unknown");
				}
			}
			
		}
		else
		{
			if ((this.redlist == "EX")||(this.redlist == "EW"))
			{
				return ("extinct");	
			}
			else
			{
				return ("stability unknown");
			}
		}
	}
	
	function conconvert(casein)
	{
		switch(casein)
		{
			case "EX":
			return ("Extinct");
			case "EW":
			return ("Extinct in the Wild");
			case "CR":
			return ("Critically Endangered");
			case "EN":
			return ("Endangered");
			case "VU":
			return ("Vulnerable");
			case "NT":
			return ("Near Threatened");
			case "LC":
			return ("Least Concern");
			case "DD":
			return ("Data Deficient");
			case "NE":
			return ("Not Evaluated");
			default:
			return ("Not Evaluated");
		}
	}
	
	function conconvert2(casein)
	{
		switch(casein)
		{
			case "EX":
			return (0);
			case "EW":
			return (1);
			case "CR":
			return (2);
			case "EN":
			return (3);
			case "VU":
			return (4);
			case "NT":
			return (5);
			case "LC":
			return (6);
			case "DD":
			return (7);
			case "NE":
			return (8);
			default:
			return (9);
		}
	}
	
	// *****************************************************************************************
	// *****************************************************************************************
	// ******** there are no functions below this point that are designed to be edited *********
	// *****************************************************************************************
	// *****************************************************************************************

	// this is the logic that draws the leaves and could be edited or added to with additional functions
	
	function drawleaf1(x,y,r)
	{
		context.beginPath();
		context.arc(x,y,r*(1-partl2*1.5),0,Math.PI*2,true);
		context.lineWidth = r*(partl2*3);
		context.stroke();
		context.fill();
	}
	
	function drawleaf2(x,y,r,angle)
	{
		var tempsinpre = Math.sin(angle);
		var tempcospre = Math.cos(angle);
		var tempsin90pre = Math.sin(angle + Math.PI/2.0);
		var tempcos90pre = Math.cos(angle + Math.PI/2.0);
		
		var startx = x-r*(1-partl2*1)*tempcospre;
		var endx = x+r*(1-partl2*1)*tempcospre;
		var starty = y-r*(1-partl2*1)*tempsinpre;
		var endy = y+r*(1-partl2*1)*tempsinpre;
		var midy = (endy-starty)/3;
		var midx = (endx-startx)/3;
		
		context.beginPath();
		context.moveTo(startx,starty);
		context.bezierCurveTo(startx+midx+2*r/2.4*tempcos90pre,starty+midy+2*r/2.4*tempsin90pre,startx+2*midx+2*r/2.4*tempcos90pre,starty+2*midy+2*r/2.4*tempsin90pre,endx,endy);
		context.bezierCurveTo(startx+2*midx-2*r/2.4*tempcos90pre,starty+2*midy-2*r/2.4*tempsin90pre,startx+midx-2*r/2.4*tempcos90pre,starty+midy-2*r/2.4*tempsin90pre,startx,starty);
		context.lineWidth = r*(partl2*3);
		context.stroke();
		context.fill();
	}
	
	// SECTION 2: GLOBAL VARIABLE DECLARIATION
	
	// display size variables - there are defaults but these values are automatically changed later
	var widthres = 1000;
	var heightres = 600;
	var xmin = 0;
	var xmax = widthres;
	var ymin = 0;
	var ymax = heightres;
	
	var widthofcontrols = 920; 
	var widthofcontrols2 = 750; 
	var growthtimetot = 30; 
	var widthofinfobar = 620;

	var buttonoptions = 0;
	// data and graphics variables
	var context; // the graphics element
	var myCanvas; // the canvas
	var fulltree; // the full tree
	var datahastraits = false; // if data has traits

	// zoom and pan position variables
	var ws = 1; // current zoom
	var xp = widthres/2; // current x position
	var yp = heightres;  // current y position
	var wsinit; // used for comparison with ws to obtain zoom level
	var calculating = false; // if in the process of calculating for zoom
	
	// variables for mouse use
	var mousehold = false;
	var buttonhold = false;
	var popupbox = false;
	var tutorialmode = false;
	var mouseX;
	var mouseY; 
	var oldyp; // old y position for moving
	var oldxp; // old x position for moving
	
	// growth functions
	var timelim = -1; // used as a global variable by the growth function to store the current time limit
	var timeinc; // used as a global variable by the growth function to store the time scaling factor
	var t2; // second timing object for growth function
	var growing = false; // if in the process of growth
	var growingpause = false;
	
	// flight functons
	var flying = false; // if in the process of flying
	var countdownB = 0;
	var t; // timing object for flying
	
	// search functions
	var numhits;
	var searchinparts = [];
	var highlight_search = false;
	var latin_search = false;
	var common_search = true;
	var trait_search = true;	
	
	// variables indicating current preferences 
	var infotype = 0; // for the info bar
	var sensitivity = 0.8; // for mouse sensitivity
	var threshold =2; // for the detail threshold
	
	var mywindow;
	
	// INITIALISERS
	
	// this initialises the whole IFIG	
	function init()
	{
		myCanvas = document.getElementById("myCanvas");
		clearbuttons();
		buttonoptions = 0;
		
		context= myCanvas.getContext('2d'); // sort out the canvas element
		Resize_only();
		draw_loading();
		myCanvas.onmousedown = holdon;
		myCanvas.onmouseup = holdoff;
		myCanvas.onmouseout = holdoff;
		myCanvas.onmousemove = movemouse;
		if (myCanvas.addEventListener) 
		{
			myCanvas.addEventListener ("mousewheel", mousewheel, false);
			myCanvas.addEventListener ("DOMMouseScroll", mousewheel, false);
		}
		else 
		{
			if (myCanvas.attachEvent) 
			{
				myCanvas.attachEvent ("onmousewheel", mousewheel);
			}
		}
		setTimeout('init2()',10);
	}
	
	function init2()
	{
		// sort out event listeners for zoom and pan
		readintree(); // read in the tree and do all the necessary precalculations
		Reset(); // set the canvas size and draw the IFIG initial view
	}
	
	// read in the tree data
	function readintree()
	{
		datahastraits = true;
		// read in information from text input
		var stringin = document.forms["myform"]["datain"].value;
		fulltree = null;
		if (stringin)
		{
			// if there is data inputed use this as the tree
			fulltree = new midnode(stringin);
		}
		else
		{
			// otherwise use embedded data set at top of file
			userdata();
		}
		if (!datahastraits)
		{
			colourtype = 2;
		}
		// calculate species richness at all nodes
		fulltree.richness_calc();
		if (datahastraits)
		{
		fulltree.concalc();
		}
		// check all names and find monophyletic genera groups
		fulltree.name_calc();
		// calculate ages
		fulltree.phylogeneticdiv_calc();
		fulltree.age_calc();
		// calculate labels
		fulltree.inlabel_calc();
		fulltree.insublabel_calc(1);
		// update fractal form and do all precalculations
		update_form();	
		// resize canvas to fit
		Resize();
		// centre view on IFIG 
		fulltree.setxyr3r(40,widthres-40,40,heightres-40);
		// store initial zoom level
		wsinit = ws;
	}
	
	// resize the canvas to fit the space
	function Resize_only()
	{
		widthres = 1024; // default
		heightres = 660; // default
		if (document.body && document.body.offsetWidth) {
			widthres = document.body.offsetWidth;
			winH = document.body.offsetHeight;
		}
		if (document.compatMode=='CSS1Compat' &&
			document.documentElement &&
			document.documentElement.offsetWidth ) {
			widthres = document.documentElement.offsetWidth;
			heightres = document.documentElement.offsetHeight;
		}
		if (window.innerWidth && window.innerHeight) {
			widthres = window.innerWidth;
			heightres = window.innerHeight;
		}
		// need to allow for space for buttons and border etc.
		heightres = heightres - 60;
		widthres = widthres - 30;
		if (buttonoptions != 0)
		{
			heightres = heightres - 40;
			if (widthres < widthofcontrols)
			{
				heightres = heightres - 27; // add space for two rows of buttons
				if (widthres < widthofcontrols/2)
				{
					heightres = heightres - 27; // add space for three rows of buttons
					if (widthres < widthofcontrols/3)
					{
						heightres = heightres - 27; // add space for four rows of buttons
					}
				}
			}
		}
		if (((infotype != 0 || growing || growingpause) && (buttonoptions ==0) ))
		{
			heightres -= 42 // add space for infobar if needed
			if (widthres < widthofinfobar)
			{
				heightres -= 42
			}
		}
		
		if (widthres < widthofcontrols2)
			{
				heightres = heightres - 27; // add space for two rows of buttons
				if (widthres < widthofcontrols2/2)
				{
					heightres = heightres - 27; // add space for three rows of buttons
					if (widthres < widthofcontrols2/3)
					{
						heightres = heightres - 27; // add space for four rows of buttons
					}
				}
			}
		// change size of canvas
		var myCanvas = document.getElementById("myCanvas");
		myCanvas.width = widthres;
		myCanvas.height = heightres;
		// redraw canvas
	}
	
	function Resize()
	{
		Resize_only();
		draw2();
	}
	
	// reset the search and view to its start position
	function Reset()
	{		
		growthtimetot = 30;
		threshold =2;
		if ((growing)||(growingpause))
		{
			clearTimeout(t2);
			draw2();
			timelim = -1;
			Resize();
			growing = false;
			growingpause = false;
			Resize();
		}
		tutorialmode = false;
		popupbox = false;
		calculating = false;
		clearTimeout(t);
		flying = false;
		clearTimeout(t2);
		performclear();
		timelim = -1;
		fulltree.deanchor();
		fulltree.graphref = true;
		fulltree.clearsearch();
		fulltree.clearlinks();
		fulltree.clearonroute();
		fulltree.setxyr3r(40,widthres-40,40,heightres-40);
		wsinit = ws;
		Resize();
	}
	
	// MOUSE CONTROL, PAN AND ZOOM
	
	// if holding down left mouse button - prepare to pan
	function holdon(event)
	{
		popupbox = false;
		clearTimeout(t);
		flying = false;
		mouseY = event.clientY-myCanvas.offsetTop;
		mouseX = event.clientX-myCanvas.offsetLeft;
		fulltree.clearlinks();
		fulltree.links();
		if (fulltree.linkclick)
		{
			mousehold = false;
			buttonhold = true;
			calculating = true;
			draw2();
			calculating = false;
		}
		else
		{
			mousehold = true;
			oldyp = yp;
			oldxp = xp;
		}
	}
	
	// if releasing left mouse button
	function holdoff()
	{
		if (fulltree.linkclick)
		{
			// link out
			fulltree.wikilink();
		}
		fulltree.clearlinks();
		if (!popupbox)
		{
			draw2();
		}
		buttonhold = false;
		mousehold = false;
		calculating = false;
	}
	
	// mouse move, so if left button held redraw
	function movemouse(event)
	{
		if (mousehold)
		{
			yp = oldyp + (-mouseY+event.clientY -myCanvas.offsetTop);
			xp = oldxp + (-mouseX+event.clientX -myCanvas.offsetLeft);
			draw2();
		}
		else
		{
			if (!popupbox)
			{
				mouseY = event.clientY -myCanvas.offsetTop;
				mouseX = event.clientX -myCanvas.offsetLeft;
				calculating = true;
				fulltree.clearlinks();
				fulltree.links();
				draw2();
				calculating = false;
			}
		}
		
	}	
	
	// need to zoom in or out
	function mousewheel(event)
	{
		popupbox = false;
		if (!calculating)
		{
			clearTimeout(t);
			flying = false;
			if (!mousehold)
			{
				var delta = 0;
				if ('wheelDelta' in event) 
				{
					delta = event.wheelDelta;
				}
				else 
				{
					delta = -event.detail / 2;
				}
				
				mouseY = event.clientY -35;
				mouseX = event.clientX -10;
				
				if ((parseFloat(delta)) > 0.0)
				{
					calculating = true;
					zoomin(event)
				}
				else
				{
					calculating = true;
					zoomout(event)
				}
			}
			setTimeout('calcfalse()',1);
			// there is a tiny delay here to force redraw in all browsers when zooming a lot
		}
	}
	
	// handles the calculating flag
	function calcfalse()
	{
		calculating = false;
	}
	
	// zoom in function
	function zoomin(event)
	{
		clearTimeout(t);
		mouseY = event.clientY -myCanvas.offsetTop;
		mouseX = event.clientX -myCanvas.offsetLeft;
		flying = false;
		ws = ws/sensitivity;
		xp = mouseX + (xp-mouseX)/sensitivity;
		yp = mouseY + (yp-mouseY)/sensitivity;
		context.clearRect(0,0, widthres,heightres);
		draw2();
	}
	
	// zoom out function
	function zoomout(event)
	{
		mouseY = event.clientY -myCanvas.offsetTop;
		mouseX = event.clientX -myCanvas.offsetLeft;
		clearTimeout(t);
		flying = false;
		ws = ws*sensitivity;
		xp = mouseX + (xp-mouseX)*sensitivity;
		yp = mouseY + (yp-mouseY)*sensitivity;
		context.clearRect(0,0, widthres,heightres);
		draw2();		
	}
	
	// BUTTON CONTROL 
	
	function clearbuttons()
	{
		document.getElementById("growtxt").style.display = 'none';
		document.getElementById("viewtxt").style.display = 'none';
		document.getElementById("viewtxt2").style.display = 'none';
		document.getElementById("searchtxt").style.display = 'none';
	
		document.getElementById("detailincbutton").style.display = 'none';
		document.getElementById("detaildecbutton").style.display = 'none';
		document.getElementById("info button").style.display = 'none';
		document.getElementById("formbutton").style.display = 'none';
		document.getElementById("colourbutton").style.display = 'none';
		document.getElementById("polybutton").style.display = 'none';
		
		document.getElementById("revgbutton").style.display = 'none';
		document.getElementById("pausegbutton").style.display = 'none';
		document.getElementById("fastergbutton").style.display = 'none';
		document.getElementById("slowergbutton").style.display = 'none';
		document.getElementById("playgbutton").style.display = 'none';
		document.getElementById("startgbutton").style.display = 'none';
		document.getElementById("endgbutton").style.display = 'none';
		
		document.getElementById("searchtf").style.display = 'none';
		document.getElementById("searchbutton").style.display = 'none';
		document.getElementById("searchbutton2").style.display = 'none';
		document.getElementById("leapbutton").style.display = 'none';
		document.getElementById("flybutton").style.display = 'none';
		document.getElementById("latincheckbox").style.display = 'none';
		document.getElementById("latintxt").style.display = 'none';
		document.getElementById("commoncheckbox").style.display = 'none';
		document.getElementById("commontxt").style.display = 'none';
		document.getElementById("traitcheckbox").style.display = 'none';
		document.getElementById("traittxt").style.display = 'none';
		
		document.getElementById("datatxt").style.display = 'none';
		document.getElementById("datatxtin").style.display = 'none';
		document.getElementById("databutton").style.display = 'none';
		
	}
	
	function searchoptions()
	{
		clearbuttons();
		if (buttonoptions == 1)
		{
			buttonoptions = 0;
		}
		else
		{
			buttonoptions = 1;
			document.getElementById("searchtxt").style.display = '';
			document.getElementById("searchtf").style.display = '';
			document.getElementById("searchbutton").style.display = '';
			document.getElementById("searchbutton2").style.display = '';
			document.getElementById("leapbutton").style.display = '';
			document.getElementById("flybutton").style.display = '';
			document.getElementById("latincheckbox").style.display = '';
			document.getElementById("latintxt").style.display = '';
			if (datahastraits)
			{
				document.getElementById("commoncheckbox").style.display = '';
				document.getElementById("commontxt").style.display = '';
				document.getElementById("traitcheckbox").style.display = '';
			document.getElementById("traittxt").style.display = '';
			}
		}
		Resize();
	}
	
	function growoptions()
	{
		clearbuttons();
		if (buttonoptions == 2)
		{
			buttonoptions = 0;
		}
		else
		{
			buttonoptions = 2;
			document.getElementById("growtxt").style.display = '';
			document.getElementById("revgbutton").style.display = '';
			document.getElementById("pausegbutton").style.display = '';
			document.getElementById("fastergbutton").style.display = '';
			document.getElementById("slowergbutton").style.display = '';
			document.getElementById("playgbutton").style.display = '';
			document.getElementById("startgbutton").style.display = '';
			document.getElementById("endgbutton").style.display = '';
			if ((!growingpause) && (!growing))
			{
				growplay();
			}
		}
		Resize();
	}
	
	function viewoptions()
	{
		clearbuttons();
		if (buttonoptions == 3)
		{
			buttonoptions = 0;
		}
		else
		{
			buttonoptions = 3;
			document.getElementById("viewtxt").style.display = '';
			document.getElementById("detailincbutton").style.display = '';
			document.getElementById("detaildecbutton").style.display = '';
			document.getElementById("info button").style.display = '';
			document.getElementById("formbutton").style.display = '';
			document.getElementById("colourbutton").style.display = '';
			document.getElementById("polybutton").style.display = '';
			if (infotype != 0)
			{
				document.getElementById("viewtxt2").style.display = '';
			}
		}
		Resize();
	}
	
	function dataoptions()
	{
		clearbuttons();
		if (buttonoptions == 4)
		{
			buttonoptions = 0;
		}
		else
		{
			document.getElementById("datatxt").style.display = '';
			document.getElementById("datatxtin").style.display = '';
			document.getElementById("databutton").style.display = '';
			buttonoptions = 4;
		}
		Resize();
	}
	
	// change use of info display
	function toggledisplay()
	{
		if (infotype == 0)
		{
			widthofcontrols += 100;
			infotype = 3
			document.getElementById("viewtxt2").style.display = '';
		}
		else
		{
			if (infotype == 3)
			{
				infotype = 4
				document.getElementById("viewtxt2").style.display = '';
			}
			else
			{
				infotype = 0
				document.getElementById("viewtxt2").style.display = 'none';
				widthofcontrols -= 100;
			}	
		}
		Resize();
	}	
	
	// change level of detail in display
	function detailup()
	{
		if (threshold > 0.2)
		{
			threshold = threshold / 2.0;
		}
		draw2();
	}
	
	function detaildown()
	{
		if (threshold < 10.0)
		{
			threshold = threshold*2.0;
		}
		draw2();
	}

	// change fractal form of display
	function form_change()
	{
		clearTimeout(t);
		flying = false;
		if (viewtype == 1)
		{
			viewtype = 2;
		}
		else
		{
			if (viewtype == 2)
			{
				viewtype = 3;
			}
			else
			{
				viewtype = 1;
			}
		}
		draw_loading();
		setTimeout('form_change2()',1);
	}
	
	function form_change2()
	{
		update_form();
		Resize();
	}
	
	// change the way polytomies are displayed
	function polyt_change()
	{
		if (polytype == 0)
		{
			polytype = 1;
		}
		else
		{
			if (polytype == 1)
			{
				polytype = 2;
			}
			else
			{
				if (polytype == 2)
				{
					polytype = 3;
				}
				else
				{
					polytype = 0;
				}
			}
		}
		draw2();
	}
	
	// change colour scheme
	function colour_change()
	{
		if (colourtype == 1)
		{
			colourtype = 2;
		}
		else
		{
			if (colourtype == 2)
			{
				if (datahastraits)
				{
					colourtype = 3;
				}
				else
				{
					colourtype = 1;
				}
			}
			else
			{
				colourtype = 1;
			}
		}
		draw2();
	}
	
	// TEXT DRAWING TOOLS
	
	// text tool
	function autotext(initalic,texttodisp,textx,texty,textw,defpt)
	{
		if (defpt > 1.5)
		{
			// draws text within a bounding width but only if possible with font size > 1
			// if possible uses the defpt font size and centres the text in the box
			// otherwise fills the box
			context.textBaseline = 'middle';
			context.textAlign = 'left';
			if (initalic)
			{
				context.font = 'italic ' + (defpt).toString() + 'px '+fonttype;
			}
			else
			{
				context.font = (defpt).toString() + 'px '+ fonttype;
			}
			var testw = context.measureText(texttodisp).width;
			if (testw > textw)
			{
				if ((defpt*textw/testw) > 1.5)
				{
					if (initalic)
					{
						context.font = 'italic ' + (defpt*textw/testw).toString() + 'px '+fonttype;
					}
					else
					{
						context.font = (defpt*textw/testw).toString() + 'px '+fonttype;
					}
					context.fillText  (texttodisp , textx - textw/2.0,texty);
				}
			}
			else
			{
				context.fillText  (texttodisp , textx - (testw)/2.0,texty);
			}
		}
	}
	
	
	function autotext2(initalic,texttodisp,textx,texty,textw,defpt)
	{
		// x and y are the centres
		if (defpt >1.5)
		{
			// draws text within a bounding width but only if possible with font size > 1
			// if possible uses the defpt font size and centres the text in the box
			// otherwise fills the box
			context.textBaseline = 'middle';
			context.textAlign = 'center';
			if (initalic)
			{
				context.font = 'italic ' + (defpt).toString() + 'px '+fonttype;
			}
			else
			{
				context.font = (defpt).toString() + 'px '+ fonttype;
			}
						
			var centerpoint = (texttodisp.length)/2;
			var splitstr = texttodisp.split(" ");
			var print1 = " ";
			var print2 = " ";
			
			if (splitstr.length == 1)
			{
				context.fillText  (texttodisp , textx ,texty);
			}
			else
			{
				if (splitstr.length == 2)
				{
					print1  = (splitstr[0]);
					print2  = (splitstr[1]);
				}
				else
				{
					for (i = (splitstr.length -1) ; i >= 0 ; i--)
					{
						if ((print2.length)>centerpoint)
						{
							print1  = (" " + splitstr[i] + print1);
						}
						else
						{
							print2 = (" " + splitstr[i] + print2);
						}
					}
				}
				var testw = context.measureText(print2).width;
				if (testw < (context.measureText(print1).width))
				{
					testw = context.measureText(print1).width
				}
				if (testw > textw)
				{
					if ((defpt*textw/testw) > 1.5)
					{
						
						if (initalic)
						{
							context.font = 'italic ' + (defpt*textw/testw).toString() + 'px '+fonttype;
						}
						else
						{
							context.font = (defpt*textw/testw).toString() + 'px '+fonttype;
						}
						
						context.fillText  (print1 , textx ,texty-defpt*textw/testw/1.7);
						context.fillText  (print2 , textx ,texty+defpt*textw/testw/1.7);
					}
				}
				else
				{
					context.fillText  (print1 , textx ,texty-defpt/1.7);
					context.fillText  (print2 , textx ,texty+defpt/1.7);
				}
			}
		}
	}
	
	// POPUP BOX DRAWING
		
	function AboutOZ()
	{
		if (!popupbox)
		{
			
			if (tutorialmode)
			{
				tutorialmode = false;
				draw2();
				tutorialmode = true;
			}
			else
			{
				draw2();
			}
			popupbox = true;
			context.beginPath();
			context.lineWidth = 1;
			context.lineTo( myCanvas.width /6 , myCanvas.height *4/5 );
			context.lineTo( myCanvas.width /6, myCanvas.height /5);
			context.lineTo( myCanvas.width *5/6, myCanvas.height /5 );
			context.lineTo( myCanvas.width *5/6 , myCanvas.height *4/5 );
			context.fillStyle = 'rgba(0,0,0,0.85)';
			context.fill();
			context.fillStyle = 'rgb(255,255,255)';
			autotext(false,"OneZoom (TM) V1.0.360 (2012)" , myCanvas.width /2 , myCanvas.height *0.27 , myCanvas.width *0.6 , 20);
			autotext(false,"Please read the associated manuscript" , myCanvas.width /2 , myCanvas.height *0.32 , myCanvas.width *0.6 , 15);
			autotext(false,"\"OneZoom: A Fractal Explorer for the Tree of Life \"" , myCanvas.width /2 , myCanvas.height *0.37 , myCanvas.width *0.6 , 15);
			autotext(false,"written by J. Rosindell and L. J. Harmon" , myCanvas.width /2 , myCanvas.height *0.42 , myCanvas.width *0.55 , 15);
			autotext(false,"Concept and software by J. Rosindell, development by J. Rosindell and L. J. Harmon" , myCanvas.width /2 , myCanvas.height *0.50 , myCanvas.width *0.6 , 10);
			autotext(false,"Special thanks to Jonathan Eastman, James Foster, Custis Lisle, Ian Owens, William Pearse, Albert Phillimore and Andy Purvis" , myCanvas.width /2 , myCanvas.height *0.53 , myCanvas.width *0.6 , 10);
			autotext(false,"J. Rosindell is grateful to NERC for funding his research" , myCanvas.width /2 , myCanvas.height *0.56 , myCanvas.width *0.71 , 10);

			autotext(false,"Data: COMPADRE Plant Matrix Database <http://www.compadre-db.org> and" , myCanvas.width /2 , myCanvas.height *0.62 , myCanvas.width *0.7 , 12);
			autotext(false,"\"Maintenance and reproduction are independent axes of vascular plant life histories\" (2014) Submitted to Science" , myCanvas.width /2 , myCanvas.height *0.65 , myCanvas.width *0.6 , 12);
			autotext(false,"Roberto Salguero-Gomez, Owen R. Jones, Eelke Jongejans, Simon Blomberg, Miguel Franco, David Hodgson," , myCanvas.width /2 , myCanvas.height *0.68 , myCanvas.width *0.72 , 12);
			autotext(false,"Cyril Mbeau-Ache, Pieter A. Zuidema, Hans de Kroon & Yvonne M. Buckley" , myCanvas.width /2 , myCanvas.height *0.71 , myCanvas.width *0.71 , 12);

		}
		else
		{
			popupbox = false;
			draw2();
		}
	}
	
	function LicenseOZ()
	{
		if (!popupbox)
		{
			if (tutorialmode)
			{
				tutorialmode = false;
				draw2();
				tutorialmode = true;
			}
			else
			{
				draw2();
			}
			popupbox = true;
			context.beginPath();
			context.lineWidth = 1;
			context.lineTo( myCanvas.width /6 , myCanvas.height *4/5 );
			context.lineTo( myCanvas.width /6, myCanvas.height /5);
			context.lineTo( myCanvas.width *5/6, myCanvas.height /5 );
			context.lineTo( myCanvas.width *5/6 , myCanvas.height *4/5 );
			context.fillStyle = 'rgba(0,0,0,0.85)';
			context.fill();
			context.fillStyle = 'rgb(255,255,255)';
			
			autotext(false,"OneZoom version 1.0.360 (2012)" , myCanvas.width /2 , myCanvas.height *0.25 , myCanvas.width *0.6 , 15);
			autotext(false,"Copyright (c) 2012 owned by James Rosindell and Imperial College, London" , myCanvas.width /2 , myCanvas.height *0.35 , myCanvas.width *0.6 , 10);
			autotext(false,"URL: www.onezoom.org - please refer to website for updates" , myCanvas.width /2 , myCanvas.height *0.39 , myCanvas.width *0.6 , 10);
			autotext(false,"Citation: \"OneZoom: A Fractal Explorer for the Tree of Life\" PLoS Biology (2012) Rosindell, J. and Harmon, L. J." , myCanvas.width /2 , myCanvas.height *0.43 , myCanvas.width *0.6 , 10);
			autotext(false,"All rights reserved. By using OneZoom, you agree to cite the associated paper in any resulting publications." , myCanvas.width /2 , myCanvas.height *0.47 , myCanvas.width *0.6 , 10);
			autotext(false,"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\")," , myCanvas.width /2 , myCanvas.height *0.51 , myCanvas.width *0.6 , 10);
			autotext(false,"to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense," , myCanvas.width /2 , myCanvas.height *0.55 , myCanvas.width *0.6 , 10);
			autotext(false,"and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:" , myCanvas.width /2 , myCanvas.height *0.59 , myCanvas.width *0.6 , 10);
			autotext(false,"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software." , myCanvas.width /2 , myCanvas.height *0.63 , myCanvas.width *0.6 , 10);
			autotext(false,"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," , myCanvas.width /2 , myCanvas.height *0.67 , myCanvas.width *0.6 , 10);
			autotext(false,"FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY," , myCanvas.width /2 , myCanvas.height *0.71 , myCanvas.width *0.6 , 10);
			autotext(false,"WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE." , myCanvas.width /2 , myCanvas.height *0.75 , myCanvas.width *0.6 , 10);
		}
		else
		{
			popupbox = false;
			draw2();
		}
	}
	
	function tutorialstart()
	{
		if (tutorialmode)
		{
			tutorialmode = false;
			draw2();
		}
		else
		{
			tutorialmode = true;
			draw2();
		}
	}
	
	// DRAWING ROUTINES

	function infobar()
	{
		document.getElementById("textout").innerHTML = '';
		if (growing || growingpause || (infotype != 0)|| buttonoptions != 0)
		{
			document.getElementById("textout").style.display = '';
		}
		else
		{
			document.getElementById("textout").style.display = 'none';
		}
		
		var toalter = "textout";
		if (buttonoptions ==3)
		{
			toalter = "viewtxt2";
		}
		
		
		if (buttonoptions == 3 || buttonoptions == 0)
		{
		if (infotype == 3)
		{
			var multret = ws/wsinit/fulltree.mult();
			//multret = Math.log(multret)/Math.log(10);
			
			if (multret<2500)
			{
				document.getElementById(toalter).innerHTML= ('<FONT COLOR="FFFFFF" >Current zoom level is ' + (Math.round(multret*10.0)/10.0).toString() + ' times magnification </FONT> ');
			}
			else
			{
				if (multret<1500000)
				{
					document.getElementById(toalter).innerHTML= ('<FONT COLOR="FFFFFF" >Current zoom level is ' + (Math.round(multret/1000.0)).toString() + ' thousand times magnification </FONT> ');
				}
				else
				{
					document.getElementById(toalter).innerHTML= ('<FONT COLOR="FFFFFF" >Current zoom level is ' + (Math.round(multret/100000.0)/10.0).toString() + ' million times magnification </FONT> ');
				}
				
			}
			
		}
		else
		{
			if (infotype == 4)
			{
				var multret = ws/wsinit/fulltree.mult();
				var mret = multret*widthres/8661.4;
				if (mret<1.5)
				{
					document.getElementById(toalter).innerHTML= ('<FONT COLOR="FFFFFF" >The complete image now measures at least ' + (Math.round(mret*1000.0)/10.0).toString() + ' Centimeters across </FONT>');
				}
				else
				{
					if (mret>1500)
					{
						document.getElementById(toalter).innerHTML= ('<FONT COLOR="FFFFFF" >The complete image now measures at least ' + (Math.round(mret/100)/10.0).toString() + ' Kilometers across </FONT>');
					}
					else
					{
						document.getElementById(toalter).innerHTML= ('<FONT COLOR="FFFFFF" >The complete image now measures at least ' + (Math.round(mret*10.0))/10.0.toString() + ' Meters across </FONT>');
					}
					
				}
				
			}
			else
			{

				document.getElementById("viewtxt2").style.display = 'none';
			}
		}
		}
		
			toalter = "growtxt";
		if (buttonoptions != 2)
		{
			toalter = "textout";
		}
		
		if (buttonoptions == 2 || buttonoptions == 0)
		{
			if ((growingpause || growing))
			{
			if (timelim >= 0 )
			{
				if (timelim >10)
				{
					document.getElementById(toalter).innerHTML = '<FONT COLOR="FFFFFF" >' + (Math.round(timelim*10)/10.0).toString() + ' Million years ago - ' + gpmapper(timelim) + ' Period </FONT>';
				}
				else
				{
					if (timelim >1)
					{
						document.getElementById(toalter).innerHTML =  '<FONT COLOR="FFFFFF" >' + (Math.round(timelim*100)/100.0).toString() + ' Million years ago - ' + gpmapper(timelim) + ' Period </FONT>';
					}
					else
					{
						document.getElementById(toalter).innerHTML =  '<FONT COLOR="FFFFFF" >' + (Math.round(timelim*10000)/10.0).toString() + ' Thousand years ago - ' + gpmapper(timelim) + ' Period </FONT>';
					}
				}
				if (growingpause)
				{
					document.getElementById(toalter).innerHTML += '<FONT COLOR="FFFFFF" >  (paused) </FONT>';
				}
		
			}
			}
			else
			{
				if (buttonoptions == 2 )
				{
					document.getElementById("growtxt").innerHTML = '<FONT COLOR="FFFFFF" > Present day </FONT>';
				}
			}
		}
	}
	
	function draw2()
	{
		fulltree.drawreg(xp,yp,220*ws);
		if ((((ws > 100)||(ws < 0.01))&&(!mousehold))) // possibly change these values
		{
			fulltree.reanchor();
			fulltree.drawreg(xp,yp,220*ws);
		}
		if (backgroundcolor)
		{
			context.fillStyle = backgroundcolor;
			context.fillRect(0,0,widthres,heightres);
		}
		else
		{
			context.clearRect(0,0,widthres,heightres);
		}
		fulltree.draw();
		context.beginPath();
		context.lineWidth = 1;
		context.strokeStyle = outlineboxcolor;
		context.moveTo( 0 , 0 );
		var myCanvas = document.getElementById("myCanvas");
		context.lineTo( myCanvas.width , 0 );
		context.lineTo( myCanvas.width , myCanvas.height );
		context.lineTo( 0 , myCanvas.height );
		context.lineTo( 0 , 0 );
		context.stroke();
		infobar();
		if (tutorialmode)
		{
			context.beginPath();
			context.lineWidth = 1;
			context.lineTo( myCanvas.width /6 , myCanvas.height *4/5 );
			context.lineTo( myCanvas.width /6, myCanvas.height /5);
			context.lineTo( myCanvas.width *5/6, myCanvas.height /5 );
			context.lineTo( myCanvas.width *5/6 , myCanvas.height *4/5 );
			context.fillStyle = 'rgba(0,0,0,0.85)';
			context.fill();
			context.fillStyle = 'rgb(255,255,255)';
			autotext(false,"OneZoom Tutorial" , myCanvas.width /2 , myCanvas.height *0.25 , myCanvas.width *0.6 , 22);
			autotext(false,"To exit the tutorial mode, press the 'Tutorial' button again, or press the 'Reset' button" , myCanvas.width /2 , myCanvas.height *0.35 , myCanvas.width *0.6 , 15);
			autotext(false,"To zoom in scroll up, to zoom out scroll down" , myCanvas.width /2 , myCanvas.height *0.39 , myCanvas.width *0.6 , 15);
			autotext(false,"To move, press and hold the left mouse button, then move the mouse" , myCanvas.width /2 , myCanvas.height *0.43 , myCanvas.width *0.6 , 15);
			autotext(false,"If you get lost and want to go back to the base of the tree press the 'Reset' button" , myCanvas.width /2 , myCanvas.height *0.47 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'Search' button will bring up a panel of controls to allow searching of the tree" , myCanvas.width /2 , myCanvas.height *0.51 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'Grow' button will allow you to see an animation of the tree growing" , myCanvas.width /2 , myCanvas.height *0.55 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'Options' button allows you to change the look and colors of the tree" , myCanvas.width /2 , myCanvas.height *0.59 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'Data' button allows you input your own data" , myCanvas.width /2 , myCanvas.height *0.63 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'More' button takes you to the OneZoom website for updates and more trees" , myCanvas.width /2 , myCanvas.height *0.67 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'License' button explains terms of use" , myCanvas.width /2 , myCanvas.height *0.75 , myCanvas.width *0.6 , 15);
			autotext(false,"The 'About' button gives production credits and version information" , myCanvas.width /2 , myCanvas.height *0.71 , myCanvas.width *0.6 , 15);
		}	
	}
	
	function Link2OZ()
	{
		mywindow = window.open("http://www.OneZoom.org");
	}
	
	function draw_loading()
	{
	
		infobar();
		Resize_only();
		if (backgroundcolor)
		{
			context.fillStyle = backgroundcolor;
			context.fillRect(0,0,widthres,heightres);
		}
		else
		{
			context.clearRect(0,0,widthres,heightres);
		}
		context.beginPath();
		context.lineWidth = 1;
		context.strokeStyle = outlineboxcolor;
		context.moveTo( 0 , 0 );
		var myCanvas = document.getElementById("myCanvas");
		context.lineTo( myCanvas.width , 0 );
		context.lineTo( myCanvas.width , myCanvas.height );
		context.lineTo( 0 , myCanvas.height );
		context.lineTo( 0 , 0 );
		context.stroke();

		context.beginPath();
		context.textBaseline = 'middle';
		context.textAlign = 'left';
		
		context.fillStyle = 'rgb(0,0,50)';
		context.font = '50px sans-serif';
		context.textAlign = 'center';
		context.fillText  ('Loading', widthres/2,heightres/2, widthres/2);

		return true;

	}
	
	// SORTING OUT THE LINKS TO OUTSIDE THE PAGE
	
	midnode.prototype.links = function()
	{
		var x ;
		var y ;
		var r ;
		if(this.dvar)
		{
			if (this.rvar)
			{
				var x = this.xvar;
				var y = this.yvar;
				var r = this.rvar;
			}
			if ((this.child1)&&(this.lengthbr > timelim))
			{
				if ((this.child1.links())||(this.child2.links()))
				{

						this.linkclick = true;
				}
			}
			
			var temp_twidth = (r*partc-r*partl2)*Twidth;
			var temp_theight = (r*partc-r*partl2)*Tsize/2.0;
			var temp_theight_2 = (r*partc-r*partl2)*Tsize/3.0;
			
			
			if (this.lengthbr > timelim)
			{
				if (this.gvar)
				{
					if (!(this.richness_val > 1))
					{
						// we are checking a leaf
						if ( (r*leafmult) > threshold*10)
						{
							if (this.leaflink(x,y,r,leafmult,partc,partl2,Twidth,Tsize))
							{

									this.linkclick = true;

							}
						}	
					}
					else
					{
						if ((this.npolyt)||(polytype == 3))
						{								
							if ( r > threshold*7)
							{
								if ((this.inlabel == true)&&((this.name2) != null))
								{
									var linkpos = 0;
									if ((this.npolyt)||(polytype != 2))
									{
										if ((highlight_search)&&(this.searchin > 0))
										{
											linkpos = temp_theight_2*0.45;
										}
									}
									if ( r > threshold*100)
									{
										if ((      ((mouseX-(x+r*this.arcx+linkpos))*(mouseX-(x+r*this.arcx+linkpos)))+  ((mouseY-(y+r*this.arcy-temp_theight_2*1.95))*(mouseY-(y+r*this.arcy-temp_theight_2*1.95)))    ) <= ((temp_theight*0.12)*(temp_theight*0.12)))
										{
											this.linkclick = true;
										}
									}
								}
							}
						}
					}
				}
			}
			if (this.lengthbr <= timelim)
			{
				if (!(this.richness_val > 1))
				{
					if ( (r*leafmult) > threshold*10)
					{
						if(this.leaflink(x,y,r,leafmult,partc,partl2,Twidth,Tsize))
						{

								this.linkclick = true;

						}
					}	
				}
			}
		}

		return this.linkclick;

	}

	midnode.prototype.leaflink = function(x,y,r,leafmult,partc,partl2,Twidth,Tsize)
	{
		if ( r > threshold*6)
		{
			var temp_twidth = (r*leafmult*partc-r*leafmult*partl2)*Twidth;
			var temp_theight = ((r*leafmult*partc-r*leafmult*partl2)*Tsize/3.0);
			if (temp_theight*0.2 > threshold/2.5)
			{
				if (((mouseX-(x+r*this.arcx))*(mouseX-(x+r*this.arcx)))+((mouseY-(y+r*this.arcy-temp_theight*1.75))*(mouseY-(y+r*this.arcy-temp_theight*1.75))) <= ((temp_theight*0.2)*(temp_theight*0.2)))
				{
					this.linkclick = true;
				}
			}
		}
		return this.linkclick;
	}
	
	midnode.prototype.clearlinks = function()
	{
		this.linkclick = false;
		if (this.child1)
		{
			this.child1.clearlinks();
			this.child2.clearlinks();	
		}
	}
	
	midnode.prototype.wikilink = function()
	{
		if (this.linkclick)
		{
			if (this.child1)
			{
				if (this.child1.linkclick)
				{
					this.child1.wikilink();
				}
				else
				{
					if (this.child2.linkclick)
					{
						this.child2.wikilink();	
					}
					else
					{
						mywindow = window.open("http://en.wikipedia.org/wiki/" + this.name2.toLowerCase());
					}
				}
			}
			else
			{
				mywindow = window.open("http://en.wikipedia.org/wiki/" + this.name2 + "_" + this.name1);
			}
		}
	}

	// FRACTAL FORM ALGORITHMS AND PRECALCULATIONS
	
	// variables that were used for all fractal forms
	var partc = 0.4;
	var partcint = 0.165;
	var partl1 = 0.55; // size of line
	var partl2 = 0.1;
	var ratio1 = 0.77; // size of larger branch
	var ratio2 = 0.47; // size of smaller branch
	var Tsize = 1.1;
	var Twidth = 1;
	var Psize = 0.70
	var leafmult = 3.2;
	var posmult = leafmult -2;
	
	midnode.prototype.precalc = function(x,y,r,angle)
	{
		this.arca = angle;
		var tempsinpre = Math.sin(angle);
		var tempcospre = Math.cos(angle);
		var tempsin90pre = Math.sin(angle + Math.PI/2.0);
		var tempcos90pre = Math.cos(angle + Math.PI/2.0);
		var atanpre;
		var atanpowpre;
		
		if (this.child1)
		{
			atanpre = Math.atan2((this.child1).richness_val,(this.child2).richness_val);
			atanpowpre = Math.atan2(Math.pow((this.child1).richness_val,0.5),Math.pow(((this.child2).richness_val),0.5));
		}
		
		var thisangleleft = 0.46;
		var thisangleright = 0.22;
		var thisratio1 = 1/1.3;;
		var thisratio2 = 1/2.25;
		
		var tempsin2 = Math.sin(angle + Math.PI*thisangleright);
		var tempcos2 = Math.cos(angle + Math.PI*thisangleright);
		var tempsin3 = Math.sin(angle - Math.PI*thisangleleft);
		var tempcos3 = Math.cos(angle - Math.PI*thisangleleft);
		
		if (this.child1)
		{
			
			if ((this.child1.richness_val) >= (this.child2.richness_val))
			{
				
				this.nextr1 = thisratio1; // r (scale) reference for child 1
				this.nextr2 = thisratio2; // r (scale) reference for child 2
				
				(this.child1).bezsx = -(0.3)*(tempcospre)/thisratio1;
				(this.child1).bezsy = -(0.3)*(tempsinpre)/thisratio1;
				(this.child1).bezex = tempcos2;
				(this.child1).bezey = tempsin2;
				(this.child1).bezc1x = -0.3*(tempcospre)/thisratio1;
				(this.child1).bezc1y = -0.3*(tempsinpre)/thisratio1;
				(this.child1).bezc2x = 0.15*(tempcospre)/thisratio1;
				(this.child1).bezc2y = 0.15*(tempsinpre)/thisratio1;
				(this.child1).bezr = partl1;
				
				(this.child2).bezsx = -(0.3)*(tempcospre)/thisratio2;
				(this.child2).bezsy = -(0.3)*(tempsinpre)/thisratio2;
				(this.child2).bezex = tempcos3;
				(this.child2).bezey = tempsin3;
				(this.child2).bezc1x = 0.1*(tempcospre)/thisratio2;
				(this.child2).bezc1y = 0.1*(tempsinpre)/thisratio2;
				(this.child2).bezc2x = 0.9*tempcos3;
				(this.child2).bezc2y = 0.9*tempsin3;
				(this.child2).bezr = partl1;
				
				this.nextx1 = (1.3*Math.cos(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty1 = (1.3*Math.sin(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempsin90pre; // y reference point for both children
				this.nextx2 = (1.3*Math.cos(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty2 = (1.3*Math.sin(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempsin90pre; // y reference point for both children
			}
			else
			{
				this.nextr2 = thisratio1; // r (scale) reference for child 1
				this.nextr1 = thisratio2; // r (scale) reference for child 2
				
				(this.child2).bezsx = -(0.3)*(tempcospre)/thisratio1;
				(this.child2).bezsy = -(0.3)*(tempsinpre)/thisratio1;
				(this.child2).bezex = tempcos2;
				(this.child2).bezey = tempsin2;
				(this.child2).bezc1x = -0.2*(tempcospre)/thisratio1;
				(this.child2).bezc1y = -0.2*(tempsinpre)/thisratio1;
				(this.child2).bezc2x = 0.15*(tempcospre)/thisratio1;
				(this.child2).bezc2y = 0.15*(tempsinpre)/thisratio1;
				(this.child2).bezr = partl1;
				
				(this.child1).bezsx = -(0.3)*(tempcospre)/thisratio2;
				(this.child1).bezsy = -(0.3)*(tempsinpre)/thisratio2;
				(this.child1).bezex = tempcos3;
				(this.child1).bezey = tempsin3;
				(this.child1).bezc1x = 0.1*(tempcospre)/thisratio2;
				(this.child1).bezc1y = 0.1*(tempsinpre)/thisratio2;
				(this.child1).bezc2x = 0.9*tempcos3;
				(this.child1).bezc2y = 0.9*tempsin3;
				(this.child1).bezr = partl1;
				
				this.nextx2 = (1.3*Math.cos(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty2 = (1.3*Math.sin(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempsin90pre; // y reference point for both children
				this.nextx1 = (1.3*Math.cos(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty1 = (1.3*Math.sin(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempsin90pre; // y reference point for both children
			}
			
			this.arcx = this.bezex;
			this.arcy = this.bezey;
			this.arcr = (this.bezr)/2;
			
			if (this.child1)
			{
				if ((this.child1.richness_val) >= (this.child2.richness_val))
				{
					this.child1.precalc (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*thisratio1,angle + Math.PI*thisangleright);
					this.child2.precalc (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*thisratio2,angle - Math.PI*thisangleleft);
				}
				else
				{
					this.child2.precalc (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*thisratio1,angle + Math.PI*thisangleright);
					this.child1.precalc (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*thisratio2,angle - Math.PI*thisangleleft);
				}
			}
		}
		else
		{
			this.arcx = this.bezex+posmult*(tempcospre);
			this.arcy = this.bezey+posmult*(tempsinpre);
			this.arcr = leafmult*partc;
		}
		
	}
	
	
	midnode.prototype.precalc2 = function(x,y,r,angle)
	{
		this.arca = angle;
		var tempsinpre = Math.sin(angle);
		var tempcospre = Math.cos(angle);
		var tempsin90pre = Math.sin(angle + Math.PI/2.0);
		var tempcos90pre = Math.cos(angle + Math.PI/2.0);
		var atanpre;
		var atanpowpre;
		
		if (this.child1)
		{
			atanpre = Math.atan2((this.child1).richness_val,(this.child2).richness_val);
			atanpowpre = Math.atan2(Math.pow((this.child1).richness_val,0.5),Math.pow(((this.child2).richness_val),0.5));
		}
		
		var thisangleleft = 0.5;
		var thisangleright = 0.2;
		var thisratio1 = ratio1;
		var thisratio2 = ratio2;
		var thislinewidth1;
		var thislinewidth2;
		if ((this.richness_val > 1)&&((this.child1)&&(this.child2)))
		{
			if ((this.child1.richness_val) >= (this.child2.richness_val))
			{
				thisangleright = 0.45-(atanpre)/Math.PI/0.5*0.449;
				thisangleleft = 0.45-(0.5-(atanpre)/Math.PI)/0.5*0.449;
				thisratio1 = 0.3+(atanpowpre)/Math.PI/0.5*0.5;
				thisratio2 = 0.3+(0.5-(atanpowpre)/Math.PI)/0.5*0.5;
			}
			else
			{
				thisangleleft = 0.45-(atanpre)/Math.PI/0.5*0.449;
				thisangleright = 0.45-(0.5-(atanpre)/Math.PI)/0.5*0.449;
				thisratio2 = 0.3+(atanpowpre)/Math.PI/0.5*0.5;
				thisratio1 = 0.3+(0.5-(atanpowpre)/Math.PI)/0.5*0.5;
			}
		}
		
		if (this.child1)
		{
			thislinewidth1 = (this.child1.richness_val)/((this.child1.richness_val)+(this.child2.richness_val));
			thislinewidth2 = (this.child2.richness_val)/((this.child1.richness_val)+(this.child2.richness_val));
		}
		
		var tempsin2 = Math.sin(angle + Math.PI*thisangleright);
		var tempcos2 = Math.cos(angle + Math.PI*thisangleright);
		var tempsin3 = Math.sin(angle - Math.PI*thisangleleft);
		var tempcos3 = Math.cos(angle - Math.PI*thisangleleft);
		
		if (this.child1)
		{
			if ((this.child1.richness_val) >= (this.child2.richness_val))
			{
				this.nextr1 = thisratio1; // r (scale) reference for child 1
				this.nextr2 = thisratio2; // r (scale) reference for child 2
				
				(this.child1).bezsx = -(0.3)*(tempcospre)/thisratio1;
				(this.child1).bezsy = -(0.3)*(tempsinpre)/thisratio1;
				(this.child1).bezex = tempcos2;
				(this.child1).bezey = tempsin2;
				(this.child1).bezc1x = 0;
				(this.child1).bezc1y = 0;
				(this.child1).bezc2x = 0.9*tempcos2;
				(this.child1).bezc2y = 0.9*tempsin2;
				(this.child1).bezr = partl1;
				
				(this.child2).bezsx = -(0.3)*(tempcospre)/thisratio2;
				(this.child2).bezsy = -(0.3)*(tempsinpre)/thisratio2;
				(this.child2).bezex = tempcos3;
				(this.child2).bezey = tempsin3;
				(this.child2).bezc1x = 0;
				(this.child2).bezc1y = 0;
				(this.child2).bezc2x = 0.3*tempcos3;
				(this.child2).bezc2y = 0.3*tempsin3;
				(this.child2).bezr = partl1;
				
				this.nextx1 = (1.3*Math.cos(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty1 = (1.3*Math.sin(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempsin90pre; // y reference point for both children
				this.nextx2 = (1.3*Math.cos(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty2 = (1.3*Math.sin(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempsin90pre; // y reference point for both children
			}
			else
			{
				this.nextr2 = thisratio1; // r (scale) reference for child 1
				this.nextr1 = thisratio2; // r (scale) reference for child 2
				
				(this.child2).bezsx = -(0.3)*(tempcospre)/thisratio1;
				(this.child2).bezsy = -(0.3)*(tempsinpre)/thisratio1;
				(this.child2).bezex = tempcos2;
				(this.child2).bezey = tempsin2;
				(this.child2).bezc1x = 0;
				(this.child2).bezc1y = 0;
				(this.child2).bezc2x = 0.9*tempcos2;
				(this.child2).bezc2y = 0.9*tempsin2;
				(this.child2).bezr = partl1;
				
				(this.child1).bezsx = -(0.3)*(tempcospre)/thisratio2;
				(this.child1).bezsy = -(0.3)*(tempsinpre)/thisratio2;
				(this.child1).bezex = tempcos3;
				(this.child1).bezey = tempsin3;
				(this.child1).bezc1x = 0;
				(this.child1).bezc1y = 0;
				(this.child1).bezc2x = 0.9*tempcos3;
				(this.child1).bezc2y = 0.9*tempsin3;
				(this.child1).bezr = partl1;
				
				this.nextx2 = (1.3*Math.cos(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty2 = (1.3*Math.sin(angle))+(((this.bezr)-(partl1*thisratio1))/2.0)*tempsin90pre; // y reference point for both children
				this.nextx1 = (1.3*Math.cos(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty1 = (1.3*Math.sin(angle))-(((this.bezr)-(partl1*thisratio2))/2.0)*tempsin90pre; // y reference point for both children
			}
			
			this.arcx = this.bezex;
			this.arcy = this.bezey;
			this.arcr = (this.bezr)/2;
			
			if (this.child1)
			{
				if ((this.child1.richness_val) >= (this.child2.richness_val))
				{
					this.child1.precalc2 (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*thisratio1,angle + Math.PI*thisangleright);
					this.child2.precalc2 (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*thisratio2,angle - Math.PI*thisangleleft);
				}
				else
				{
					this.child2.precalc2 (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*thisratio1,angle + Math.PI*thisangleright);
					this.child1.precalc2 (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*thisratio2,angle - Math.PI*thisangleleft);
				}
			}
		}
		else
		{
			this.arcx = this.bezex+posmult*(tempcospre);
			this.arcy = this.bezey+posmult*(tempsinpre);
			this.arcr = leafmult*partc;
		}
		
	}
	
	midnode.prototype.precalc3 = function(x,y,r,angle,dir)
	{
		this.arca = angle;
		var tempsinpre = Math.sin(angle);
		var tempcospre = Math.cos(angle);
		var tempsin90pre = Math.sin(angle + Math.PI/2.0);
		var tempcos90pre = Math.cos(angle + Math.PI/2.0);
		var atanpre;
		var atanpowpre;
		
		var thisangleleft = 0.2;
		var thisangleright = 0.1;
		var thisratio1 = 0.85;
		var thisratio2 = 0.42;
		var child1right = false;
		
		if (!dir)
		{
			var thisangleleft = 0.1;
			var thisangleright = 0.2;
			var thisratio1 = 0.42;
			var thisratio2 = 0.85;
			if (this.child1)
			{
				if ((this.child1.richness_val) < (this.child2.richness_val))
				{
					child1right = true;
				}
			}
		}
		else
		{
			if (this.child1)
			{
				if ((this.child1.richness_val) >= (this.child2.richness_val))
				{
					child1right = true;
				}
			}
		}
		
		var partl1a = partl1;
		var partl1b = partl1;
		var tempsin2 = Math.sin(angle + Math.PI*thisangleright);
		var tempcos2 = Math.cos(angle + Math.PI*thisangleright);
		var tempsin3 = Math.sin(angle - Math.PI*thisangleleft);
		var tempcos3 = Math.cos(angle - Math.PI*thisangleleft);
		
		if (this.child1)
		{
			
			if (child1right)
			{
				
				this.nextr1 = thisratio1; // r (scale) reference for child 1
				this.nextr2 = thisratio2; // r (scale) reference for child 2
				
				(this.child1).bezsx = -(0.3)*(tempcospre)/thisratio1;
				(this.child1).bezsy = -(0.3)*(tempsinpre)/thisratio1;
				(this.child1).bezex = tempcos2;
				(this.child1).bezey = tempsin2;
				(this.child1).bezc1x = -0.3*(tempcospre)/thisratio1;
				(this.child1).bezc1y = -0.3*(tempsinpre)/thisratio1;
				(this.child1).bezc2x = 0.15*(tempcospre)/thisratio1;
				(this.child1).bezc2y = 0.15*(tempsinpre)/thisratio1;
				(this.child1).bezr = partl1;
				
				(this.child2).bezsx = -(0.3)*(tempcospre)/thisratio2;
				(this.child2).bezsy = -(0.3)*(tempsinpre)/thisratio2;
				(this.child2).bezex = tempcos3;
				(this.child2).bezey = tempsin3;
				(this.child2).bezc1x = 0.1*(tempcospre)/thisratio2;
				(this.child2).bezc1y = 0.1*(tempsinpre)/thisratio2;
				(this.child2).bezc2x = 0.9*tempcos3;
				(this.child2).bezc2y = 0.9*tempsin3;
				(this.child2).bezr = partl1;
				
				this.nextx1 = (1.3*Math.cos(angle))+(((this.bezr)-(partl1a*thisratio1))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty1 = (1.3*Math.sin(angle))+(((this.bezr)-(partl1a*thisratio1))/2.0)*tempsin90pre; // y reference point for both children
				this.nextx2 = (1.3*Math.cos(angle))-(((this.bezr)-(partl1b*thisratio2))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty2 = (1.3*Math.sin(angle))-(((this.bezr)-(partl1b*thisratio2))/2.0)*tempsin90pre; // y reference point for both children
			}
			else
			{
				this.nextr2 = thisratio1; // r (scale) reference for child 1
				this.nextr1 = thisratio2; // r (scale) reference for child 2
				
				(this.child2).bezsx = -(0.3)*(tempcospre)/thisratio1;
				(this.child2).bezsy = -(0.3)*(tempsinpre)/thisratio1;
				(this.child2).bezex = tempcos2;
				(this.child2).bezey = tempsin2;
				(this.child2).bezc1x = -0.2*(tempcospre)/thisratio1;
				(this.child2).bezc1y = -0.2*(tempsinpre)/thisratio1;
				(this.child2).bezc2x = 0.15*(tempcospre)/thisratio1;
				(this.child2).bezc2y = 0.15*(tempsinpre)/thisratio1;
				(this.child2).bezr = partl1;
				
				(this.child1).bezsx = -(0.3)*(tempcospre)/thisratio2;
				(this.child1).bezsy = -(0.3)*(tempsinpre)/thisratio2;
				(this.child1).bezex = tempcos3;
				(this.child1).bezey = tempsin3;
				(this.child1).bezc1x = 0.1*(tempcospre)/thisratio2;
				(this.child1).bezc1y = 0.1*(tempsinpre)/thisratio2;
				(this.child1).bezc2x = 0.9*tempcos3;
				(this.child1).bezc2y = 0.9*tempsin3;
				(this.child1).bezr = partl1;
				
				this.nextx2 = (1.3*Math.cos(angle))+(((this.bezr)-(partl1a*thisratio1))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty2 = (1.3*Math.sin(angle))+(((this.bezr)-(partl1a*thisratio1))/2.0)*tempsin90pre; // y reference point for both children
				this.nextx1 = (1.3*Math.cos(angle))-(((this.bezr)-(partl1b*thisratio2))/2.0)*tempcos90pre; // x refernece point for both children
				this.nexty1 = (1.3*Math.sin(angle))-(((this.bezr)-(partl1b*thisratio2))/2.0)*tempsin90pre; // y reference point for both children
			}
			
			this.arcx = this.bezex;
			this.arcy = this.bezey;
			this.arcr = (this.bezr)/2;
			
			if (this.child1)
			{
				if (child1right)
				{
					this.child1.precalc3 (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*thisratio1,angle + Math.PI*thisangleright,!dir);
					this.child2.precalc3 (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*thisratio2,angle - Math.PI*thisangleleft,!dir);
				}
				else
				{
					this.child2.precalc3 (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*thisratio1,angle + Math.PI*thisangleright,!dir);
					this.child1.precalc3 (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*thisratio2,angle - Math.PI*thisangleleft,!dir);
				}
			}
		}
		else
		{
			this.arcx = this.bezex+posmult*0.9*(tempcospre);
			this.arcy = this.bezey+posmult*0.9*(tempsinpre);
			this.arcr = leafmult*partc*0.9;
		}
	}
	
	function update_form()	
	{
		// updates the view and all variables to match the current viewtype
		//fulltree.clearroute();
		fulltree.drawreg(xp,yp,220*ws);
		fulltree.move2();
		
		fulltree.bezsx = 0; // start x position
		fulltree.bezsy = 0; // start y position
		fulltree.bezex = 0; // end x position
		fulltree.bezey = -1; // end y position
		fulltree.bezc1x = 0; // control point 1 x position
		fulltree.bezc1y = -0.05; // control point 2 y position
		fulltree.bezc2x = 0; // control point 2 x position
		fulltree.bezc2y = -0.95; // control point 2 y position
		fulltree.bezr = partl1; // line width
		
		if (viewtype == 2)
		{
			fulltree.precalc2(xp,yp,220*ws,Math.PI*3/2);
		}
		else
		{
			if (viewtype == 3)
			{
				fulltree.bezsx = -Math.sin(Math.PI*0.05); // start x position
				fulltree.bezsy = 0; // start y position
				fulltree.bezex = -Math.sin(Math.PI*0.05); // end x position
				fulltree.bezey = -Math.cos(Math.PI*0.05); // end y position
				fulltree.bezc1x = -Math.sin(Math.PI*0.05); // control point 1 x position
				fulltree.bezc1y = -0.05; // control point 2 y position
				fulltree.bezc2x = -Math.sin(Math.PI*0.05); // control point 2 x position
				fulltree.bezc2y = -0.95; // control point 2 y position
				fulltree.bezr = partl1; // line width
				fulltree.precalc3(xp,yp,220*ws,Math.PI*(3/2-0.05),true,true);
			}
			else
			{
				fulltree.precalc(xp,yp,220*ws,Math.PI*3/2);
			}
		}
		fulltree.calchorizon();
		fulltree.graphref = true;
		fulltree.reref();
		//fulltree.clearsearch();
		Resize_only();
		fulltree.deanchor();
		fulltree.reref();
		fulltree.move3(40,widthres-40,40,heightres-40);		
		draw2();
	}
	
	// NODE OBJECT BASIC CALCULATIONS
	
	midnode.prototype.richness_calc = function()
	{
		if (this.child1)
		{
			this.richness_val =  (((this.child1).richness_calc())+((this.child2).richness_calc()));
		}
		else
		{
			if (this.richness_val <= 0)
			{
				this.richness_val = 1;
			}
		}
		return (this.richness_val);
	}
	
	midnode.prototype.concalc = function()
	{
		this.num_EX = 0;
		this.num_EW = 0;
		this.num_CR = 0;
		this.num_EN = 0;
		this.num_VU = 0;
		this.num_NT = 0;
		this.num_LC = 0;
		this.num_DD = 0;
		this.num_NE = 0;
		
		this.num_I = 0;
		this.num_D = 0;
		this.num_S = 0;
		this.num_U = 0;
		
		if (this.child1)
		{
			(this.child1).concalc();
			(this.child2).concalc();
			
			
			this.num_EX = ((this.child1).num_EX) + ((this.child2).num_EX);
			this.num_EW = ((this.child1).num_EW) + ((this.child2).num_EW);
			this.num_CR = ((this.child1).num_CR) + ((this.child2).num_CR);
			this.num_EN = ((this.child1).num_EN) + ((this.child2).num_EN);
			this.num_VU = ((this.child1).num_VU) + ((this.child2).num_VU);
			this.num_NT = ((this.child1).num_NT) + ((this.child2).num_NT);
			this.num_LC = ((this.child1).num_LC) + ((this.child2).num_LC);
			this.num_DD = ((this.child1).num_DD) + ((this.child2).num_DD);
			this.num_NE = ((this.child1).num_NE) + ((this.child2).num_NE);
			
			this.num_I = ((this.child1).num_I) + ((this.child2).num_I);
			this.num_D = ((this.child1).num_D) + ((this.child2).num_D);
			this.num_S = ((this.child1).num_S) + ((this.child2).num_S);
			this.num_U = ((this.child1).num_U) + ((this.child2).num_U);
			
		}
		else
		{
			this.num_EX = 0;
			this.num_EW = 0;
			this.num_CR = 0;
			this.num_EN = 0;
			this.num_VU = 0;
			this.num_NT = 0;
			this.num_LC = 0;
			this.num_DD = 0;
			this.num_NE = 0;
		
			this.num_I = 0;
			this.num_D = 0;
			this.num_S = 0;
			this.num_U = 0;
			
			if (this.redlist)
			{
				switch(this.redlist)
				{
					case "EX":
					{
						this.num_EX = 1;
						break;
					}
					case "EW":
					{
						this.num_EW = 1;
						break;
					}
					case "CR":
					{
						this.num_CR = 1;
						break;
					}
					case "EN":
					{
						this.num_EN = 1;
						break;
					}
					case "VU":
					{
						this.num_VU = 1;
						break;
					}
					case "NT":
					{
						this.num_NT = 1;
						break;
					}
					case "LC":
					{
						this.num_LC = 1;
						break;
					}
					case "DD":
					{
						this.num_DD = 1;
						break;
					}
					case "NE":
					{
						this.num_NE = 1;
						break;
					}
					default:
					{
						this.num_NE = 1;	
						break;
					}
				}
			}
			else
			{
				this.num_NE = 1;
			}
			
			if (this.popstab)
			{
				switch(this.popstab)
				{
					case "I":
					{
						this.num_I = 1;
						break;
					}
					case "S":
					{
						this.num_S = 1;
						break;
					}
					case "D":
					{
						this.num_D = 1;
						break;
					}
					case "U":
					{
						this.num_U = 1;
						break;
					}
					default:
					{
						this.num_U = 1;	
						break;
					}
				}
			}
			else
			{
				this.num_U = 1;
			}
			
		}
	}
	
	midnode.prototype.name_calc = function()
	{
		if (this.child1)
		{
			if (((this.child1).name_calc())==((this.child2).name_calc()))
			{
				this.name2 = ((this.child1).name2);
				this.hasname2 = true;
			}
		}
		return (this.name2);
	}
	
	midnode.prototype.phylogeneticdiv_calc = function()
	{
		this.phylogenetic_diversity = 0;
		if (this.child1)
		{
			this.phylogenetic_diversity += (this.child2).phylogeneticdiv_calc();
			this.phylogenetic_diversity += (this.child1).phylogeneticdiv_calc();
		}
		return (this.phylogenetic_diversity + this.lengthbr);
	}
	
	midnode.prototype.age_calc = function()
	{
		if ((this.lengthbr == 0)&&(this.child1))
		{
			this.npolyt = false;
		}
		else
		{
			this.npolyt = true;
		}
		var length_temp;
		length_temp = (this.lengthbr);
		if (this.child1)
		{
			(this.lengthbr) = (this.child2).age_calc();
			(this.lengthbr) = (this.child1).age_calc();
			return ((length_temp)+(this.lengthbr));
		}
		else
		{
			(this.lengthbr) = 0;
			return (length_temp);
		}	
	}
	
	midnode.prototype.inlabel_calc = function()
	{
		if (this.child1)
		{
			if (!(this.name2))
			{
				if (this.child1.name2)
				{
					this.child1.inlabel = true;
				}
				else
				{
					this.child1.inlabel_calc();
				}
				if (this.child2.name2)
				{
					this.child2.inlabel = true;
				}
				else
				{
					this.child2.inlabel_calc();
				}
			}
			if (this.hasname1)
			{
				this.inlabel = true;
				this.name2 = this.name1;
				this.hasname2 = true;
			}
		}
		
	}
	
	midnode.prototype.insublabel_calc = function(num_since)
	{
		if ((this.richness_val >= 10)&&(this.child1))
		{
			if (this.inlabel)
			{
				this.child1.insublabel_calc(0);
				this.child2.insublabel_calc(0);
			}
			else
			{
				if (num_since >=1)
				{
					this.insublabel = true;
					this.child1.insublabel_calc(0);
					this.child2.insublabel_calc(0);
				}
				else
				{
					this.child1.insublabel_calc(num_since+1);
					this.child2.insublabel_calc(num_since+1);
				}
			}
		}
		else
		{
			if (this.richness_val >= 1)
			{
				if (this.hasname2)
				{
					this.inlabel = true;
				}
				else
				{
					this.insublabel = true;
				}
			}
		}
	}
	
	// DEEP ZOOM REREFERENCING METHODS (COMPLEX)
	
	// returns the product of all scaling factors so as to find out the total scaling difference
	midnode.prototype.mult = function ()
	{
		var multreturn;
		if (this.child1)
		{
			if (this.child1.graphref)
			{
				multreturn = (this.nextr1)*(this.child1.mult());
			}
			else
			{
				if (this.child2.graphref)
				{
					multreturn = (this.nextr2)*(this.child2.mult());
				}
				else
				{
					multreturn = 1;
				}
			}
		}
		else
		{
			multreturn = 1;
		}
		return multreturn;
	}
	
	midnode.prototype.reref = function()
	{
		if (this.onroute)
		{
			this.graphref = true;
			if (this.child1)
			{
				if (this.child1.onroute)
				{
					this.child1.reref();
				}
				else
				{
					this.child1.graphref = false;
				}
				if (this.child2.onroute)
				{
					this.child2.reref();
				}
				else
				{
					this.child2.graphref = false;
				}	
			}
		}
	}
	
	midnode.prototype.calchorizon = function()
	{
		// find the bounding box for the bezier curve
		this.hxmax = this.bezsx;
		this.hxmin = this.bezsx;
		this.hymax = this.bezsy;
		this.hymin = this.bezsy;
		if (this.hxmax < this.bezc1x) { this.hxmax = this.bezc1x; }
		if (this.hxmin > this.bezc1x) { this.hxmin = this.bezc1x; }
		if (this.hymax < this.bezc1y) { this.hymax = this.bezc1y; }
		if (this.hymin > this.bezc1y) { this.hymin = this.bezc1y; }
		if (this.hxmax < this.bezc2x) { this.hxmax = this.bezc2x; }
		if (this.hxmin > this.bezc2x) { this.hxmin = this.bezc2x; }
		if (this.hymax < this.bezc2y) { this.hymax = this.bezc2y; }
		if (this.hymin > this.bezc2y) { this.hymin = this.bezc2y; }
		if (this.hxmax < this.bezex) { this.hxmax = this.bezex; }
		if (this.hxmin > this.bezex) { this.hxmin = this.bezex; }
		if (this.hymax < this.bezey) { this.hymax = this.bezey; }
		if (this.hymin > this.bezey) { this.hymin = this.bezey; }
		this.hxmax += this.bezr/2;
		this.hxmin -= this.bezr/2;
		this.hymax += this.bezr/2;
		this.hymin -= this.bezr/2;
		
		//expand the bounding box to include the arc if necessary
		if (this.hxmax < (this.arcx+this.arcr)) { this.hxmax = (this.arcx+this.arcr); }
		if (this.hxmin > (this.arcx-this.arcr)) { this.hxmin = (this.arcx-this.arcr); }
		if (this.hymax < (this.arcy+this.arcr)) { this.hymax = (this.arcy+this.arcr); }
		if (this.hymin > (this.arcy-this.arcr)) { this.hymin = (this.arcy-this.arcr); }
		// set the graphics bounding box before the horizon is expanded for children
		this.gxmax = this.hxmax;
		this.gxmin = this.hxmin;
		this.gymax = this.hymax;
		this.gymin = this.hymin;
		
		// check for children
		if(this.child1)
		{
			// if children calculate their horizons
			this.child1.calchorizon ();
			this.child2.calchorizon ();
			// and expand the bounding box if necessary
			if (this.hxmax < (this.nextx1+this.nextr1*this.child1.hxmax)) { this.hxmax = (this.nextx1+this.nextr1*this.child1.hxmax); }
			if (this.hxmin > (this.nextx1+this.nextr1*this.child1.hxmin)) { this.hxmin = (this.nextx1+this.nextr1*this.child1.hxmin); }
			if (this.hymax < (this.nexty1+this.nextr1*this.child1.hymax)) { this.hymax = (this.nexty1+this.nextr1*this.child1.hymax); }
			if (this.hymin > (this.nexty1+this.nextr1*this.child1.hymin)) { this.hymin = (this.nexty1+this.nextr1*this.child1.hymin); }
			if (this.hxmax < (this.nextx2+this.nextr2*this.child2.hxmax)) { this.hxmax = (this.nextx2+this.nextr2*this.child2.hxmax); }
			if (this.hxmin > (this.nextx2+this.nextr2*this.child2.hxmin)) { this.hxmin = (this.nextx2+this.nextr2*this.child2.hxmin); }
			if (this.hymax < (this.nexty2+this.nextr2*this.child2.hymax)) { this.hymax = (this.nexty2+this.nextr2*this.child2.hymax); }
			if (this.hymin > (this.nexty2+this.nextr2*this.child2.hymin)) { this.hymin = (this.nexty2+this.nextr2*this.child2.hymin); }
		}
	}
		
	midnode.prototype.reanchor = function ()
	{
		if (this.dvar)
		{
			this.graphref = true;
			if (((this.gvar)||(!(this.child1)))||((this.rvar/220>0.01)&&(this.rvar/220<100)))
			{
				// reanchor here
				xp = this.xvar;
				yp = this.yvar;
				ws = this.rvar/220;
				if (this.child1)
				{
					this.child2.deanchor();
					this.child1.deanchor();
				}
			}
			else
			{
				// reanchor somewhere down the line
				if (this.child1.dvar)
				{
					this.child1.reanchor();
					this.child2.deanchor();
					
				}
				else
				{
					this.child2.reanchor();
					this.child1.deanchor();
				}
			}
		}
		// else not possible to reanchor
	}
	
	midnode.prototype.deanchor = function ()
	{
		if (this.graphref)
		{
			if (this.child1)
			{
				this.child1.deanchor();
				this.child2.deanchor();
			}
			this.graphref = false;
		}
	}
	
	midnode.prototype.drawreg = function(x,y,r)
	{
		// we assume that only those for whom graphref is true will call this routine
		if (this.child1)
		{
			// we are not a leaf and we are referencing - check children
			if (this.child1.graphref)
			{
				// child 1 leads to (or is) the referencing node
				this.child1.drawreg(x,y,r);
				this.rvar = this.child1.rvar/this.nextr1;
				this.xvar = this.child1.xvar-this.rvar*this.nextx1;
				this.yvar = this.child1.yvar-this.rvar*this.nexty1;
				this.dvar = false;
				this.child2.gvar = false;
				this.child2.dvar = false; 
				
				if(((!((((this.xvar+(this.rvar*this.hxmax))<0)||((this.xvar+(this.rvar*this.hxmin))>widthres))||(((this.yvar+(this.rvar*this.hymax))<0)||((this.yvar+(this.rvar*this.hymin))>heightres))))))
				{
					if (this.rvar > threshold)
					{
						
						this.child2.drawreg2 (this.xvar+((this.rvar)*(this.nextx2)),this.yvar+(this.rvar)*(this.nexty2),this.rvar*this.nextr2);
					}
					
					if(((((this.xvar+(this.rvar*this.gxmax))<0)||((this.xvar+(this.rvar*this.gxmin))>widthres))||(((this.yvar+(this.rvar*this.gymax))<0)||((this.yvar+(this.rvar*this.gymin))>heightres))))
					{
						this.gvar = false;
					}
					else
					{
						this.gvar = true;
						this.dvar = true;
					}
					if (this.rvar <= threshold)
					{
						this.child1.gvar = false;
						this.child2.gvar = false;
						this.child1.dvar = false;
						this.child2.dvar = false;
					}
				}
				else
				{
					this.gvar = false;
				}
				
				if ((this.child1.dvar)||(this.child2.dvar))
				{
					this.dvar = true;
				}
				
			}
			else
			{
				if (this.child2.graphref)
				{
					// child 2 leads to (or is) the referencing node
					this.child2.drawreg(x,y,r);
					this.rvar = this.child2.rvar/this.nextr2;
					this.xvar = this.child2.xvar-this.rvar*this.nextx2;
					this.yvar = this.child2.yvar-this.rvar*this.nexty2;
					this.dvar = false;
					this.child1.gvar = false;
					this.child1.dvar = false; 
					
					if(((!((((this.xvar+(this.rvar*this.hxmax))<0)||((this.xvar+(this.rvar*this.hxmin))>widthres))||(((this.yvar+(this.rvar*this.hymax))<0)||((this.yvar+(this.rvar*this.hymin))>heightres))))))
					{
						if (this.rvar > threshold)
						{
							this.child1.drawreg2 (this.xvar+((this.rvar)*(this.nextx1)),this.yvar+(this.rvar)*(this.nexty1),this.rvar*this.nextr1);	
						}
						
						if(((((this.xvar+(this.rvar*this.gxmax))<0)||((this.xvar+(this.rvar*this.gxmin))>widthres))||(((this.yvar+(this.rvar*this.gymax))<0)||((this.yvar+(this.rvar*this.gymin))>heightres))))
						{
							this.gvar = false;
						}
						else
						{
							this.gvar = true;
							
							this.dvar = true;
						}
						
						if (this.rvar <= threshold)
						{
							this.child1.gvar = false;
							this.child2.gvar = false;
							this.child1.dvar = false;
							this.child2.dvar = false;
						}
					}
					else
					{
						this.gvar = false;
					}
					
					if ((this.child1.dvar)||(this.child2.dvar))
					{
						this.dvar = true;
					}
				}
				else
				{
					// we are the referencing node so call drawreg2
					this.drawreg2(x,y,r);
				}
			}
		}
		else
		{
			// we are a leaf and we are referencing - we are the referencing node so record x,y,r
			this.drawreg2(x,y,r); //does all we need and will automatically skip any child commands
		}
	}
	
	midnode.prototype.drawreg2 = function(x,y,r)
	{
		this.xvar = x;
		this.yvar = y;
		this.rvar = r;
		this.dvar = false;	
		if(((!((((x+(r*this.hxmax))<0)||((x+(r*this.hxmin))>widthres))||(((y+(r*this.hymax))<0)||((y+(r*this.hymin))>heightres))))))
		{
			if (this.child1)
			{
				if (r > threshold)
				{
					this.child1.drawreg2 (x+((r)*(this.nextx1)),y+(r)*(this.nexty1),r*this.nextr1);
					this.child2.drawreg2 (x+((r)*(this.nextx2)),y+(r)*(this.nexty2),r*this.nextr2);
				}
				else
				{
					this.child1.gvar = false;
					this.child1.dvar = false; 
					this.child2.gavr = false;
					this.child2.dvar = false; 
				}
				
				if ((this.child1.dvar)||(this.child2.dvar))
				{
					this.dvar = true;
				}
			}
			if(((((x+(r*this.gxmax))<0)||((x+(r*this.gxmin))>widthres))||(((y+(r*this.gymax))<0)||((y+(r*this.gymin))>heightres))))
			{
				this.gvar = false;
			}
			else
			{
				this.gvar = true;
				this.dvar = true;

			}
		}
		else
		{
			this.gvar = false;
		}
	}
	
	// SEARCH UTILITIES
	
	midnode.prototype.search = function()
	{
		
		// initialize the search variables to the default (wipe previous searches)
		this.startscore = 0;
		this.targeted = false;
		this.searchinpast = 0; 
		this.flysofarA = false;
		this.flysofarB = false;
		var temphitsa = 0;
	
		var thishit = true;
		for (i = 0 ; i < searchinparts.length ; i ++)
		{
			if (!(this.searchone(searchinparts[i],false)))
			{
				thishit = false;
			}
		}
		if (thishit)
		{
			temphitsa += this.richness_val;
		}
		else
		{
			if (this.child1)
			{
				temphitsa += (this.child1).search();
				temphitsa += (this.child2).search();
			}
		}
		
		
		this.searchin = temphitsa;
		return temphitsa;
	}
	
	
	midnode.prototype.searchtarget = function()
	{
		// go down richerside and then use density as decider
		// keep going until density reaches threshold
		var searchresult = -1;
		if ((this.searchin-this.searchinpast)>0)
		{
			if (((this.searchin-this.searchinpast) / (this.richness_val))>0.7)
			{
				this.targeted = true;
				if ((this.child1)&&(((this.child1).searchin > 0)||((this.child2).searchin > 0)))
				{
					if ((((this.child1).searchin)-((this.child1).searchinpast)) <= 0)
					{
						var returned = (this.child2).searchtarget();
						
						searchresult = returned;
					}
					else
					{
						if ((((this.child2).searchin)-((this.child2).searchinpast)) <= 0)
						{
							var returned = (this.child1).searchtarget();
							
							searchresult = returned;
						}
						else
						{
							searchresult = this.searchin;
						}
					}
				}
				else
				{
					searchresult = this.searchin;
				}
			}
			else
			{
				if (this.child1)
				{
					var searchresult1 = this.child1.searchtarget();
					var searchresult2 = this.child2.searchtarget();
				}
				if (searchresult1 > searchresult2)
				{
					this.child1.targeted = true;
					this.child2.targeted = false;
					searchresult = searchresult1;
				}
				else
				{
					this.child2.targeted = true;
					this.child1.targeted = false;
					searchresult = searchresult2;
				}
			}	
		}
		return (searchresult);
	}
	
	midnode.prototype.searchtargetmark = function()
	{
		var searchresult = -1;
		if (this.targeted)
		{
			searchresult = this.searchin;
			if (this.child1)
			{
				if (this.child1.targeted)
				{
					searchresult = this.child1.searchtargetmark();
				}
				else
				{
					if (this.child2.targeted)
					{
						searchresult = this.child2.searchtargetmark();
					}
				}
			}
			this.searchinpast += searchresult;
		}
		return (searchresult);
	}
	
	midnode.prototype.clearsearch = function ()
	{
		(this.searchin) = 0;
		this.targeted = false;
		this.searchinpast = 0;
		this.flysofarA = false;
		this.flysofarB = false;
		if (this.child1)
		{
			(this.child1).clearsearch();
			(this.child2).clearsearch();
		}		
	}
	
	midnode.prototype.clearroute = function ()
	{
		this.onroute = false;
		if (this.child1)
		{
			(this.child1).clearroute();
			(this.child2).clearroute();
		}		
	}
	
	midnode.prototype.semiclearsearch = function ()
	{
		this.targeted = false;
		this.flysofarA = false;
		this.flysofarB = false;
		if (this.child1)
		{
			(this.child1).semiclearsearch();
			(this.child2).semiclearsearch();
		}		
	}
	
	midnode.prototype.setxyr = function(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,movement,propmove)
	{
		var vxmax;
		var vxmin;
		var vymax;
		var vymin;
		if (this.child1)
		{
			if (movement != 2)
			{
				vxmax = x+r*this.nextx1 + r*this.nextr1*this.child1.hxmax; 
				
				vxmin = x+r*this.nextx1 + r*this.nextr1*this.child1.hxmin; 
				
				vymax = y+r*this.nexty1 + r*this.nextr1*this.child1.hymax; 
				
				vymin = y+r*this.nexty1 + r*this.nextr1*this.child1.hymin; 
				if (movement != 1)
				{
					
					if (vxmax < (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax)) 
					{ 
						vxmax = (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax); 
					}
					if (vxmin > (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin)) 
					{ 
						vxmin = (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin); 
					}
					if (vymax < (y+r*this.nexty2 + r*this.nextr2*this.child2.hymax)) 
					{ 
						vymax = (y+r*this.nexty2 + r*this.nextr2*this.child2.hymax); 
					}
					if (vymin > (y+r*this.nexty2 + r*this.nextr2*this.child2.hymin)) 
					{ 
						vymin = (y+r*this.nexty2 + r*this.nextr2*this.child2.hymin); 
					}
				}
			}
			else
			{
				vxmax = x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax; 
				vxmin = x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin; 
				vymax = y+r*this.nexty2 + r*this.nextr2*this.child2.hymax; 
				vymin = y+r*this.nexty2 + r*this.nextr2*this.child2.hymin; 
			}
		}
		else
		{
			vxmax = (x+r*(this.arcx+this.arcr));
			vxmin = (x+r*(this.arcx-this.arcr));
			vymax = (y+r*(this.arcy+this.arcr));
			vymin = (y+r*(this.arcy-this.arcr));
		}
		
		if (vxmax < (x+r*(this.bezsx+this.bezex)/2)) { vxmax = (x+r*(this.bezsx+this.bezex)/2); }
		if (vxmin > (x+r*(this.bezsx+this.bezex)/2)) { vxmin = (x+r*(this.bezsx+this.bezex)/2); }
		if (vymax < (y+r*(this.bezsy+this.bezey)/2)) { vymax = (y+r*(this.bezsy+this.bezey)/2); }
		if (vymin > (y+r*(this.bezsy+this.bezey)/2)) { vymin = (y+r*(this.bezsy+this.bezey)/2); }
		
		var ywsmult = ((ytargmax-ytargmin)/(vymax-vymin));//propmove;
		// the number we need to multply ws by to get the right size for a vertical fit
		var xwsmult = ((xtargmax-xtargmin)/(vxmax-vxmin));//propmove;
		// the number we need to multply ws by to get the right size for a horizontal fit
		var wsmult;
		if (ywsmult > xwsmult)
		{
			// we use xwsmult - the smaller
			wsmult = xwsmult;
		}
		else
		{
			// we use ywsmult - the smaller
			wsmult = ywsmult;
		}
		xp += (((xtargmax+xtargmin)/2.0)-((vxmax+vxmin)/2.0));
		yp += (((ytargmax+ytargmin)/2.0)-((vymax+vymin)/2.0));
		ws = ws*wsmult;
		xp = widthres/2 + (xp-widthres/2)*wsmult;
		yp = heightres/2 + (yp-heightres/2)*wsmult;
	}
	
	midnode.prototype.setxyr3r = function(xtargmin,xtargmax,ytargmin,ytargmax)
	{
		
		ws = 1; 
		xp = widthres/2; 
		yp = heightres; 
		var x = xp;
		var y = yp;
		var r = 220*ws;
		
		var vxmax;
		var vxmin;
		var vymax;
		var vymin;
		
		if (this.child1)
		{
			vxmax = x+r*this.nextx1 + r*this.nextr1*this.child1.hxmax; 
			vxmin = x+r*this.nextx1 + r*this.nextr1*this.child1.hxmin; 
			vymax = y+r*this.nexty1 + r*this.nextr1*this.child1.hymax; 
			vymin = y+r*this.nexty1 + r*this.nextr1*this.child1.hymin; 
			if (vxmax < (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax)) 
			{ 
				vxmax = (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax); 
			}
			if (vxmin > (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin)) 
			{ 
				vxmin = (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin); 
			}
			if (vymax < (y+r*this.nexty2 + r*this.nextr2*this.child2.hymax)) 
			{ 
				vymax = (y+r*this.nexty2 + r*this.nextr2*this.child2.hymax); 
			}
			if (vymin > (y+r*this.nexty2 + r*this.nextr2*this.child2.hymin)) 
			{ 
				vymin = (y+r*this.nexty2 + r*this.nextr2*this.child2.hymin); 
			}
		}
		else
		{
			vxmax = (x+r*(this.arcx+this.arcr));
			vxmin = (x+r*(this.arcx-this.arcr));
			vymax = (y+r*(this.arcy+this.arcr));
			vymin = (y+r*(this.arcy-this.arcr));
		}
		if (vxmax < (x+r*(this.bezsx+this.bezex)/2)) { vxmax = (x+r*(this.bezsx+this.bezex)/2); }
		if (vxmin > (x+r*(this.bezsx+this.bezex)/2)) { vxmin = (x+r*(this.bezsx+this.bezex)/2); }
		if (vymax < (y+r*(this.bezsy+this.bezey)/2)) { vymax = (y+r*(this.bezsy+this.bezey)/2); }
		if (vymin > (y+r*(this.bezsy+this.bezey)/2)) { vymin = (y+r*(this.bezsy+this.bezey)/2); }
		
		var ywsmult = ((ytargmax-ytargmin)/(vymax-vymin));//propmove;
		// the number we need to multply ws by to get the right size for a vertical fit
		var xwsmult = ((xtargmax-xtargmin)/(vxmax-vxmin));//propmove;
		// the number we need to multply ws by to get the right size for a horizontal fit
		var wsmult;
		if (ywsmult > xwsmult)
		{
			// we use xwsmult - the smaller
			wsmult = xwsmult;
		}
		else
		{
			// we use ywsmult - the smaller
			wsmult = ywsmult;
		}
		
		xp += (((xtargmax+xtargmin)/2.0)-((vxmax+vxmin)/2.0));//*((1-(1/wsmult))/(1-(Math.pow((1/wsmult),propmove))));
		yp += (((ytargmax+ytargmin)/2.0)-((vymax+vymin)/2.0));//*((1-(1/wsmult))/(1-(Math.pow((1/wsmult),propmove))));
		
		ws = ws*wsmult;
		xp = widthres/2 + (xp-widthres/2)*wsmult;
		yp = heightres/2 + (yp-heightres/2)*wsmult;
	}
	
	midnode.prototype.setxyr2 = function(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,movement,propmove,flynum)
	{
		var vxmax;
		var vxmin;
		var vymax;
		var vymin;
		if (movement != 3)
		{
			vxmax = (x+r*(this.fxmax));//(x+r*(this.arcx+this.arcr));
			vxmin = (x+r*(this.fxmin));
			vymax = (y+r*(this.fymax));
			vymin = (y+r*(this.fymin));
		}
		else
		{
			if (this.child1)
			{
				vxmax = x+r*this.nextx1 + r*this.nextr1*this.child1.hxmax; 
				vxmin = x+r*this.nextx1 + r*this.nextr1*this.child1.hxmin; 
				vymax = y+r*this.nexty1 + r*this.nextr1*this.child1.hymax; 
				vymin = y+r*this.nexty1 + r*this.nextr1*this.child1.hymin; 
				if (vxmax < (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax)) 
				{ 
					vxmax = (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmax); 
				}
				if (vxmin > (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin)) 
				{ 
					vxmin = (x+r*this.nextx2 + r*this.nextr2*this.child2.hxmin); 
				}
				if (vymax < (y+r*this.nexty2 + r*this.nextr2*this.child2.hymax)) 
				{ 
					vymax = (y+r*this.nexty2 + r*this.nextr2*this.child2.hymax); 
				}
				if (vymin > (y+r*this.nexty2 + r*this.nextr2*this.child2.hymin)) 
				{ 
					vymin = (y+r*this.nexty2 + r*this.nextr2*this.child2.hymin); 
				}
			}
			else
			{
				vxmax = (x+r*(this.arcx+this.arcr));
				vxmin = (x+r*(this.arcx-this.arcr));
				vymax = (y+r*(this.arcy+this.arcr));
				vymin = (y+r*(this.arcy-this.arcr));
			}
			if (vxmax < (x+r*(this.bezsx+this.bezex)/2)) { vxmax = (x+r*(this.bezsx+this.bezex)/2); }
			if (vxmin > (x+r*(this.bezsx+this.bezex)/2)) { vxmin = (x+r*(this.bezsx+this.bezex)/2); }
			if (vymax < (y+r*(this.bezsy+this.bezey)/2)) { vymax = (y+r*(this.bezsy+this.bezey)/2); }
			if (vymin > (y+r*(this.bezsy+this.bezey)/2)) { vymin = (y+r*(this.bezsy+this.bezey)/2); }
		}
		
		var ywsmult = ((ytargmax-ytargmin)/(vymax-vymin));//propmove;
		// the number we need to multply ws by to get the right size for a vertical fit
		var xwsmult = ((xtargmax-xtargmin)/(vxmax-vxmin));//propmove;
		// the number we need to multply ws by to get the right size for a horizontal fit
		var wsmult;
		if (ywsmult > xwsmult)
		{
			// we use xwsmult - the smaller
			wsmult = xwsmult;
		}
		else
		{
			// we use ywsmult - the smaller
			wsmult = ywsmult;
		}
		
		wsmult =Math.pow(wsmult,(1.0/propmove));
		var xpadd;
		var ypadd;
		
		if (Math.abs(wsmult-1) < 0.000001)
		{
			xpadd = (((xtargmax+xtargmin)/2.0)-((vxmax+vxmin)/2.0));//*((1-(1/wsmult))/(1-(Math.pow((1/wsmult),propmove))));
			ypadd = (((ytargmax+ytargmin)/2.0)-((vymax+vymin)/2.0));//*((1-(1/wsmult))/(1-(Math.pow((1/wsmult),propmove))));
		}
		else
		{
			xpadd = (((xtargmax+xtargmin)/2.0)-((vxmax+vxmin)/2.0))*((1-(1/wsmult))/(1-(Math.pow((1/wsmult),propmove))));
			ypadd = (((ytargmax+ytargmin)/2.0)-((vymax+vymin)/2.0))*((1-(1/wsmult))/(1-(Math.pow((1/wsmult),propmove))));
		}
		xp+= xpadd;
		yp+= ypadd;
		ws = ws*wsmult;
		xp = widthres/2 + (xp-widthres/2)*wsmult;
		yp = heightres/2 + (yp-heightres/2)*wsmult;
	}
	
	midnode.prototype.move = function(xtargmin,xtargmax,ytargmin,ytargmax)
	{
		if (this.targeted)
		{
			this.graphref = true;
			if (this.child1)
			{
				if (this.child1.targeted)
				{
					this.child1.move(xtargmin,xtargmax,ytargmin,ytargmax);
				}
				else
				{
					if (this.child2.targeted)
					{
						this.child2.move(xtargmin,xtargmax,ytargmin,ytargmax);
					}
					else
					{
						this.setxyr3r(40,widthres-40,40,heightres-40);
						this.setxyr3r(40,widthres-40,40,heightres-40);
					}
				}
			}
			else
			{
				this.setxyr3r(40,widthres-40,40,heightres-40);
				this.setxyr3r(40,widthres-40,40,heightres-40);
			}
		}
	}	
	
	midnode.prototype.move3 = function(xtargmin,xtargmax,ytargmin,ytargmax)
	{
		if (this.onroute)
		{
			if (this.child1)
			{
				if (this.child1.onroute)
				{
					this.child1.move3(xtargmin,xtargmax,ytargmin,ytargmax);
				}
				else
				{
					if (this.child2.onroute)
					{
						this.child2.move3(xtargmin,xtargmax,ytargmin,ytargmax);
					}
					else
					{
						this.setxyr3r(40,widthres-40,40,heightres-40);
						this.setxyr3r(40,widthres-40,40,heightres-40);
					}
				}
			}
			else
			{
				this.setxyr3r(40,widthres-40,40,heightres-40);
				this.setxyr3r(40,widthres-40,40,heightres-40);
			}
		}
	}	
	
	midnode.prototype.move2 = function()
	{
		if (this.dvar)
		{
			this.onroute = true;
			if ((!(this.gvar))&&(this.child1))
			{
				if (!((this.child1.dvar)&&(this.child2.dvar)))
				{
					if (this.child1.dvar)
					{
						this.child1.move2();
					}
					else
					{
						if (this.child2.dvar)
						{
							this.child2.move2();
						}
					}
				}
			}
		}
	}
	
	midnode.prototype.clearonroute = function()
	{
		this.onroute = false;
		if (this.child1)
		{
			(this.child1).clearonroute();
			(this.child2).clearonroute();
		}
	}
	
	midnode.prototype.flyFB = function(xtargmin,xtargmax,ytargmin,ytargmax)
	{
		var x = this.xvar;
		var y = this.yvar;
		var r = this.rvar;
		if (this.targeted)
		{	
			if (this.flysofarB)
			{
				if (this.child1)
				{
					if (this.child1.targeted)
					{
						this.child1.flyFB(xtargmin,xtargmax,ytargmin,ytargmax);
					}
					else
					{
						if (this.child2.targeted)
						{
							this.child2.flyFB(xtargmin,xtargmax,ytargmin,ytargmax);
						}
						else
						{
							if (this.flysofarB )
							{
								if (flying)
								{
									clearTimeout(t);
									fulltree.searchtargetmark();
									flying = false;
								}
							}
							else
							{
								this.setxyr2(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,3,countdownB,2);
								if (countdownB <= 1)
								{
									this.flysofarB = true;
									
									countdownB = 6;
									
								}
								else
								{
									countdownB --;
								}
							}
						}
					}
				}
				else
				{
					if (this.flysofarB )
					{
						if (flying)
						{
							clearTimeout(t);
							fulltree.searchtargetmark();
							flying = false;
						}
					}
					else
					{
						this.setxyr2(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,3,countdownB,2);
						if (countdownB <= 1)
						{
							this.flysofarB = true;
							
							countdownB = 6;
							
						}
						else
						{
							countdownB --;
						}
					}
				}
			}
			else
			{
				if (this.child1)
				{
					if (this.child1.targeted)
					{
						this.setxyr2(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,1,countdownB,2);
						if (countdownB <= 1)
						{
							this.flysofarB = true;
							countdownB = 6;
							
						}
						else
						{
							countdownB --;
						}
					}
					else
					{
						if (this.child2.targeted)
						{
							this.setxyr2(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,2,countdownB,2);
							if (countdownB <= 1)
							{
								this.flysofarB = true;
								
								countdownB = 6;
								
							}
							else
							{
								countdownB --;
							}
						}
						else
						{
						
							if (this.flysofarB )
							{
								if (flying)
								{
									clearTimeout(t);
									fulltree.searchtargetmark();
									flying = false;
								}
							}
							else
							{
								this.setxyr2(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,3,countdownB,2);
								if (countdownB <= 1)
								{
									this.flysofarB = true;
									
									countdownB = 6;
									
								}
								else
								{
									countdownB --;
								}
							}
						}
					}
				}
				else
				{
					if (this.flysofarB )
					{
						if (flying)
						{
							clearTimeout(t);
							fulltree.searchtargetmark();
							flying = false;
						}
					}
					else
					{
						this.setxyr2(x,y,r,xtargmin,xtargmax,ytargmin,ytargmax,3,countdownB,2);
						if (countdownB <= 1)
						{
							this.flysofarB = true;
							
							countdownB = 6;
							
						}
						else
						{
							countdownB --;
						}
					}
				}
			}
		}
	}	
	
	midnode.prototype.prepfly = function(x,y,r)
	{
		if (this.targeted)
		{
			this.fxmax = this.gxmax;
			this.fxmin = this.gxmin;
			this.fymax = this.gymax;
			this.fymin = this.gymin;	
			
			// nothing to do otherwise
			if (this.child1)
			{
				if (this.child1.targeted)
				{
					this.child1.prepfly(x+r*this.nextx1,y+r*this.nexty1,r*this.nextr1);
					if (this.fxmax < (this.nextx1+this.nextr1*this.child1.fxmax)) { this.fxmax = (this.nextx1+this.nextr1*this.child1.fxmax) }
					if (this.fxmin > (this.nextx1+this.nextr1*this.child1.fxmin)) { this.fxmin = (this.nextx1+this.nextr1*this.child1.fxmin) }
					if (this.fymax < (this.nexty1+this.nextr1*this.child1.fymax)) { this.fymax = (this.nexty1+this.nextr1*this.child1.fymax) }
					if (this.fymin > (this.nexty1+this.nextr1*this.child1.fymin)) { this.fymin = (this.nexty1+this.nextr1*this.child1.fymin) }
					
				}
				else
				{
					if (this.child2.targeted)
					{
						this.child2.prepfly(x+r*this.nextx2,y+r*this.nexty2,r*this.nextr2);
						if (this.fxmax < (this.nextx2+this.nextr2*this.child2.fxmax)) { this.fxmax = (this.nextx2+this.nextr2*this.child2.fxmax) }
						if (this.fxmin > (this.nextx2+this.nextr2*this.child2.fxmin)) { this.fxmin = (this.nextx2+this.nextr2*this.child2.fxmin) }
						if (this.fymax < (this.nexty2+this.nextr2*this.child2.fymax)) { this.fymax = (this.nexty2+this.nextr2*this.child2.fymax) }
						if (this.fymin > (this.nexty2+this.nextr2*this.child2.fymin)) { this.fymin = (this.nexty2+this.nextr2*this.child2.fymin) }
						
					}
					else
					{
						this.fxmax = this.hxmax;
						this.fxmin = this.hxmin;
						this.fymax = this.hymax;
						this.fymin = this.hymin;	
					}
				}
			}
			else
			{
				this.fxmax = this.hxmax;
				this.fxmin = this.hxmin;
				this.fymax = this.hymax;
				this.fymin = this.hymin;	
			}
		}
	}	
	
	function marksearch()
	{
		performsearch2(false);
		highlight_search = true;
		draw2();
	}
	
	function unmarksearch()
	{
		highlight_search = false;
		draw2();
	}
	
	function performclear()
	{
		highlight_search = false;
		searchinparts = [];
		context.clearRect(0,0, widthres,heightres);
		draw2();
	}
	
	function performfly()
	{
		if (!flying)
		{
			fulltree.deanchor();
			fulltree.graphref = true;
			fulltree.setxyr(xp,yp,220*ws,20,widthres-2,20,heightres,0,1);
			fulltree.setxyr(xp,yp,220*ws,20,widthres-2,20,heightres,0,1);
			wsinit = ws;
			draw2();
			fulltree.semiclearsearch();
		
			flying = true;

			
			performsearch2(false);
			
			if (fulltree.searchtarget() == -1)
			{
				searchinparts = [];
				performsearch2(false);
				fulltree.searchtarget()
			}
			fulltree.targeted = true;
			//fulltree.searchtargetmark();
			countdownB = 12;
			fulltree.flysofarB = true;
			if (fulltree.child1)
			{
				if (fulltree.child1.targeted)
				{
					if (((fulltree.child1).child1)&&((fulltree.child1).child1.targeted||(fulltree.child1).child2.targeted))
					{
						fulltree.child1.flysofarB = true;
					}
				}
				if (fulltree.child2.targeted)
				{
					if (((fulltree.child2).child1)&&((fulltree.child2).child1.targeted||(fulltree.child2).child2.targeted))
					{
						fulltree.child2.flysofarB = true;
					}
				}
			}
			fulltree.prepfly(xp,yp,220*ws,5);
			performfly2();
		}
	}
	
	function performfly2()
	{
		fulltree.drawreg(xp,yp,220*ws);
		fulltree.flyFB(40,widthres-40,40,heightres-40);
		draw2();
		if (flying)
		{
			t = setTimeout('performfly2()',100);
		}
	}
	
	function performleap()
	{
		clearTimeout(t);
		flying = false;
		performsearch2(false);
		if (fulltree.searchtarget() == -1)
		{
			searchinparts = [];
			performsearch2(true);
			fulltree.searchtarget()
		}		
		fulltree.targeted = true;
		fulltree.searchtargetmark();
		fulltree.deanchor();		
		fulltree.move(40,widthres-40,40,heightres-40);
		draw2();
	}
	
	// GROW OPTIONS
	
	midnode.prototype.oldest = function()
	{
		var oldestreturn = 0.0;
		if(this.dvar)
		{
			if(this.gvar)
			{
				if (this.lengthbr)
				{
					if ( this.lengthbr > oldestreturn )
					{
						oldestreturn = this.lengthbr;
					}
				}
			}
			if (this.child1)
			{
				var oldestc1 = this.child1.oldest ();
				var oldestc2 = this.child2.oldest ();
				if (oldestc1 > oldestreturn)
				{
					oldestreturn = oldestc1;
				}
				if (oldestc2 > oldestreturn)
				{
					oldestreturn = oldestc2;
				}
			}
		}
		return oldestreturn;
	}
		
	function growstart()	
	{
		timelim = fulltree.oldest();
		clearTimeout(t2);
		growingpause = true;
		growing = false;
		Resize();
	}
	
	function growrev()			
	{
		if (timelim >= fulltree.oldest())
		{
			timelim = -0.001;
		}
		clearTimeout(t2);
		growingpause = false;
		growing = true;
		Resize();
		timeinc = fulltree.oldest()/(growthtimetot*10);
		grow3();
	}
	
	function growpause()
	{
		clearTimeout(t2);
		growingpause = true;
		growing = false;
		Resize();
	}
	
	function growplay()
	{
		if (timelim <= 0)
		{
			timelim = fulltree.oldest();
		}
		clearTimeout(t2);
		growingpause = false;
		growing = true;
		Resize();
		timeinc = fulltree.oldest()/(growthtimetot*10);
		grow2();
	}
	
	function growend()		
	{
		clearTimeout(t2);
		timelim = -1;
		clearTimeout(t2);
		growingpause = false;
		growing = false;
		Resize();
	}
	
	function growfaster()
	{
		
		growthtimetot = growthtimetot/1.25;
		timeinc = fulltree.oldest()/(growthtimetot*10);
	}
	
	function growslower()
	{
		growthtimetot = growthtimetot*1.25;
		timeinc = fulltree.oldest()/(growthtimetot*10);
	}
	
	function grow2()
	{
		if (timelim >= 0)
		{
			timelim -= timeinc;
			draw2();
			t2 = setTimeout('grow2()',100);
		}
		else
		{
			clearTimeout(t2);
			draw2();
			t2 = setTimeout('Resize()',500);
			growing = false;
			growingpause = false;
		}
	}
	
	function grow3()
	{
		if (timelim <= fulltree.oldest())
		{
			timelim += timeinc;
			draw2();
			t2 = setTimeout('grow3()',100);
		}
		else
		{
			clearTimeout(t2);
			draw2();
			t2 = setTimeout('Resize()',500);
			growing = false;
			growingpause = true;
		}
	}
	
	</script>

<head>

<meta NAME="viewport" CONTENT="width=device-width , initial-scale=1.0 , user-scalable=no">

<title>  OneZoom - Everything on one page, all you have to do is zoom</title>

<script type="text/javascript">
    
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35612933-1']);
    _gaq.push(['_trackPageview']);
    
    (function() {
     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
     ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
     })();
     
    </script>

</head>

<body id = "wholebody" onLoad="init();" style="background-color:  rgb(0, 0, 0) " onresize="(Resize())">

	<center>
		 <a href="http://www.OneZoom.org" target="_blank"><FONT COLOR="FFFFFF">OneZoom</FONT></a><FONT COLOR="FFFFFF"> - Tree of Life &nbsp;</FONT>
		<button style = "cursor:pointer" type="button" id = "hbutton1" onclick="searchoptions();">Search</button> 
		<button style = "cursor:pointer" type="button" id = "hbutton2" onclick="growoptions();">Grow</button> 
		<button style = "cursor:pointer" type="button" id = "hbutton3" onclick="viewoptions();">Options</button>
		<button style = "cursor:pointer" type="button" id = "hbutton9" onclick="dataoptions();">Data</button>
		<button style = "cursor:pointer" type="button" id = "hbutton4" onclick="Reset();">Reset</button>
		<button style = "cursor:pointer" type="button" id = "hbutton5" onclick="tutorialstart();">Tutorial</button>
		<button style = "cursor:pointer" type="button" id = "hbutton6" onclick="Link2OZ();">More</button>
		<button style = "cursor:pointer" type="button" id = "hbutton7" onclick="AboutOZ();">About</button>
		<button style = "cursor:pointer" type="button" id = "hbutton8" onclick="LicenseOZ();">License</button>
	</center>
	
	<p </p>
	<center>
		<canvas id="myCanvas" ></canvas>
	</center>
	<p id="textout"></p>
	
	<form name="myform">
			
			<FONT COLOR="FFFFFF" id = "viewtxt"> Look and Feel </FONT> 
			<button style = "cursor:pointer"id = "detailincbutton" type="button" onclick="detaildown();">Detail -</button> 
			<button style = "cursor:pointer"id = "detaildecbutton" type="button" onclick="detailup();">Detail +</button> 
			<button style = "cursor:pointer"id = "info button" type="button" onclick="toggledisplay();">Zoom Level</button> 
			<button style = "cursor:pointer"id = "formbutton" type="button" onclick="form_change();">View Type</button> 
			<button style = "cursor:pointer"id = "colourbutton" type="button" onclick="colour_change();">Colour Scheme</button> 
			<button style = "cursor:pointer"id = "polybutton"type="button" onclick="polyt_change();">Show Polytomies</button> 
			
			<FONT COLOR="FFFFFF" id = "viewtxt2"> </FONT>
			  
			<button style = "cursor:pointer"id = "startgbutton" type="button" onclick="growstart();">Beginning</button>  		
			<button style = "cursor:pointer"id = "revgbutton" type="button" onclick="growrev();">Reverse</button>  		
			<button style = "cursor:pointer"id = "pausegbutton" type="button" onclick="growpause();">Pause</button>  
			<button style = "cursor:pointer"id = "playgbutton" type="button" onclick="growplay();">Play</button> 
			<button style = "cursor:pointer"id = "endgbutton" type="button" onclick="growend();">End</button>  	
			<button style = "cursor:pointer"id = "fastergbutton" type="button" onclick="growfaster();">Faster</button>  
			<button style = "cursor:pointer"id = "slowergbutton" type="button" onclick="growslower();">Slower</button>  
			<FONT COLOR="FFFFFF" id = "growtxt"> </FONT>
			
			<FONT COLOR="FFFFFF" id = "searchtxt"> Search </FONT> 
			<input id = "searchtf" type="text" name="tosearchfor" /> 
			<input id = "latincheckbox" type="checkbox" name="latinsearch" value="latinsearch" checked="checked" />  
			<FONT COLOR="FFFFFF" id = "latintxt"> Latin </FONT> 
			<input id = "commoncheckbox" type="checkbox" name="commonsearch" value="commonsearch" checked="checked" />  
			<FONT COLOR="FFFFFF" id = "commontxt"> Common </FONT>
			<input id = "traitcheckbox" type="checkbox" name="traitsearch" value="traitsearch" checked="checked" />  
			<FONT COLOR="FFFFFF" id = "traittxt"> Conservation </FONT>
			<button style = "cursor:pointer"id = "searchbutton" type="button" id= "markbutton" onclick="marksearch();">Mark Results</button> 
			<button style = "cursor:pointer"id = "searchbutton2" type="button" id= "markbutton" onclick="unmarksearch();">Unmark Results</button>  
			<button style = "cursor:pointer"id = "leapbutton" name="Flybutton" type="button" onclick="performleap();">Show Results</button> 
			<button style = "cursor:pointer"id = "flybutton" name="Flybutton" type="button" onclick="performfly();">Fly to Results</button> 
			
			<FONT COLOR="FFFFFF" id = "datatxt"> Data in newick format, ultrametric, polytomies as branch length zero - </FONT>
			<input type="text" id = "datatxtin" name="datain" width = "35" /> 
			<button type="button" id = "databutton" onclick="init();">Load data</button> 
			
	</form>
	
</body>

